
build/aes-ecb-test.elf:     file format elf32-littlearm


Disassembly of section .text:

000000c0 <deregister_tm_clones>:
  c0:	4804      	ldr	r0, [pc, #16]	; (d4 <deregister_tm_clones+0x14>)
  c2:	4b05      	ldr	r3, [pc, #20]	; (d8 <deregister_tm_clones+0x18>)
  c4:	b510      	push	{r4, r14}
  c6:	4283      	cmp	r3, r0
  c8:	d003      	beq.n	d2 <deregister_tm_clones+0x12>
  ca:	4b04      	ldr	r3, [pc, #16]	; (dc <deregister_tm_clones+0x1c>)
  cc:	2b00      	cmp	r3, #0
  ce:	d000      	beq.n	d2 <deregister_tm_clones+0x12>
  d0:	4798      	blx	r3
  d2:	bd10      	pop	{r4, r15}
  d4:	20000000 	.word	0x20000000
  d8:	20000000 	.word	0x20000000
  dc:	00000000 	.word	0x00000000

000000e0 <register_tm_clones>:
  e0:	4806      	ldr	r0, [pc, #24]	; (fc <register_tm_clones+0x1c>)
  e2:	4907      	ldr	r1, [pc, #28]	; (100 <register_tm_clones+0x20>)
  e4:	1a09      	subs	r1, r1, r0
  e6:	108b      	asrs	r3, r1, #2
  e8:	0fc9      	lsrs	r1, r1, #31
  ea:	18c9      	adds	r1, r1, r3
  ec:	b510      	push	{r4, r14}
  ee:	1049      	asrs	r1, r1, #1
  f0:	d003      	beq.n	fa <register_tm_clones+0x1a>
  f2:	4b04      	ldr	r3, [pc, #16]	; (104 <register_tm_clones+0x24>)
  f4:	2b00      	cmp	r3, #0
  f6:	d000      	beq.n	fa <register_tm_clones+0x1a>
  f8:	4798      	blx	r3
  fa:	bd10      	pop	{r4, r15}
  fc:	20000000 	.word	0x20000000
 100:	20000000 	.word	0x20000000
 104:	00000000 	.word	0x00000000

00000108 <__do_global_dtors_aux>:
 108:	b510      	push	{r4, r14}
 10a:	4c07      	ldr	r4, [pc, #28]	; (128 <__do_global_dtors_aux+0x20>)
 10c:	7823      	ldrb	r3, [r4, #0]
 10e:	2b00      	cmp	r3, #0
 110:	d109      	bne.n	126 <__do_global_dtors_aux+0x1e>
 112:	f7ff ffd5 	bl	c0 <deregister_tm_clones>
 116:	4b05      	ldr	r3, [pc, #20]	; (12c <__do_global_dtors_aux+0x24>)
 118:	2b00      	cmp	r3, #0
 11a:	d002      	beq.n	122 <__do_global_dtors_aux+0x1a>
 11c:	4804      	ldr	r0, [pc, #16]	; (130 <__do_global_dtors_aux+0x28>)
 11e:	e000      	b.n	122 <__do_global_dtors_aux+0x1a>
 120:	bf00      	nop
 122:	2301      	movs	r3, #1
 124:	7023      	strb	r3, [r4, #0]
 126:	bd10      	pop	{r4, r15}
 128:	20000000 	.word	0x20000000
 12c:	00000000 	.word	0x00000000
 130:	00000ee4 	.word	0x00000ee4

00000134 <frame_dummy>:
 134:	4b05      	ldr	r3, [pc, #20]	; (14c <frame_dummy+0x18>)
 136:	b510      	push	{r4, r14}
 138:	2b00      	cmp	r3, #0
 13a:	d003      	beq.n	144 <frame_dummy+0x10>
 13c:	4904      	ldr	r1, [pc, #16]	; (150 <frame_dummy+0x1c>)
 13e:	4805      	ldr	r0, [pc, #20]	; (154 <frame_dummy+0x20>)
 140:	e000      	b.n	144 <frame_dummy+0x10>
 142:	bf00      	nop
 144:	f7ff ffcc 	bl	e0 <register_tm_clones>
 148:	bd10      	pop	{r4, r15}
 14a:	46c0      	nop			; (mov r8, r8)
 14c:	00000000 	.word	0x00000000
 150:	20000004 	.word	0x20000004
 154:	00000ee4 	.word	0x00000ee4

00000158 <__libc_init_array>:
 158:	b570      	push	{r4, r5, r6, r14}
 15a:	4d0c      	ldr	r5, [pc, #48]	; (18c <__libc_init_array+0x34>)
 15c:	4e0c      	ldr	r6, [pc, #48]	; (190 <__libc_init_array+0x38>)
 15e:	1b76      	subs	r6, r6, r5
 160:	10b6      	asrs	r6, r6, #2
 162:	d005      	beq.n	170 <__libc_init_array+0x18>
 164:	2400      	movs	r4, #0
 166:	cd08      	ldmia	r5!, {r3}
 168:	3401      	adds	r4, #1
 16a:	4798      	blx	r3
 16c:	42a6      	cmp	r6, r4
 16e:	d1fa      	bne.n	166 <__libc_init_array+0xe>
 170:	f000 feb8 	bl	ee4 <_init>
 174:	4d07      	ldr	r5, [pc, #28]	; (194 <__libc_init_array+0x3c>)
 176:	4e08      	ldr	r6, [pc, #32]	; (198 <__libc_init_array+0x40>)
 178:	1b76      	subs	r6, r6, r5
 17a:	10b6      	asrs	r6, r6, #2
 17c:	d005      	beq.n	18a <__libc_init_array+0x32>
 17e:	2400      	movs	r4, #0
 180:	cd08      	ldmia	r5!, {r3}
 182:	3401      	adds	r4, #1
 184:	4798      	blx	r3
 186:	42a6      	cmp	r6, r4
 188:	d1fa      	bne.n	180 <__libc_init_array+0x28>
 18a:	bd70      	pop	{r4, r5, r6, r15}
 18c:	00001138 	.word	0x00001138
 190:	00001138 	.word	0x00001138
 194:	00001138 	.word	0x00001138
 198:	0000113c 	.word	0x0000113c

0000019c <memcmp>:
 19c:	b530      	push	{r4, r5, r14}
 19e:	2a03      	cmp	r2, #3
 1a0:	d90c      	bls.n	1bc <memcmp+0x20>
 1a2:	0003      	movs	r3, r0
 1a4:	430b      	orrs	r3, r1
 1a6:	079b      	lsls	r3, r3, #30
 1a8:	d119      	bne.n	1de <memcmp+0x42>
 1aa:	6803      	ldr	r3, [r0, #0]
 1ac:	680c      	ldr	r4, [r1, #0]
 1ae:	42a3      	cmp	r3, r4
 1b0:	d115      	bne.n	1de <memcmp+0x42>
 1b2:	3a04      	subs	r2, #4
 1b4:	3004      	adds	r0, #4
 1b6:	3104      	adds	r1, #4
 1b8:	2a03      	cmp	r2, #3
 1ba:	d8f6      	bhi.n	1aa <memcmp+0xe>
 1bc:	1e55      	subs	r5, r2, #1
 1be:	2a00      	cmp	r2, #0
 1c0:	d00b      	beq.n	1da <memcmp+0x3e>
 1c2:	2300      	movs	r3, #0
 1c4:	e003      	b.n	1ce <memcmp+0x32>
 1c6:	1c5a      	adds	r2, r3, #1
 1c8:	429d      	cmp	r5, r3
 1ca:	d006      	beq.n	1da <memcmp+0x3e>
 1cc:	0013      	movs	r3, r2
 1ce:	5cc2      	ldrb	r2, [r0, r3]
 1d0:	5ccc      	ldrb	r4, [r1, r3]
 1d2:	42a2      	cmp	r2, r4
 1d4:	d0f7      	beq.n	1c6 <memcmp+0x2a>
 1d6:	1b10      	subs	r0, r2, r4
 1d8:	e000      	b.n	1dc <memcmp+0x40>
 1da:	2000      	movs	r0, #0
 1dc:	bd30      	pop	{r4, r5, r15}
 1de:	1e55      	subs	r5, r2, #1
 1e0:	e7ef      	b.n	1c2 <memcmp+0x26>
 1e2:	46c0      	nop			; (mov r8, r8)

000001e4 <main>:
const uint8_t expected_out[] = {
  0x69, 0xC4, 0xE0, 0xD8, 0x6A, 0x7B, 0x04, 0x30,
  0xD8, 0xCD, 0xB7, 0x80, 0x70, 0xB4, 0xC5, 0x5A
};

int main(void) {
 1e4:	b590      	push	{r4, r7, r14}
 1e6:	b089      	sub	sp, #36	; 0x24
 1e8:	af00      	add	r7, sp, #0
  uint8_t out[AES_BLOCK_SIZE];
  uint8_t in2[AES_BLOCK_SIZE];

  // Decrypt the output block
  aes_128_ecb_decrypt(key, expected_out, in2);
 1ea:	003a      	movs	r2, r7
 1ec:	4913      	ldr	r1, [pc, #76]	; (23c <main+0x58>)
 1ee:	4b14      	ldr	r3, [pc, #80]	; (240 <main+0x5c>)
 1f0:	0018      	movs	r0, r3
 1f2:	f000 fd50 	bl	c96 <aes_128_ecb_decrypt>

  // Encrypt the input block
  aes_128_ecb_encrypt(key, in2, out);
 1f6:	2410      	movs	r4, #16
 1f8:	193a      	adds	r2, r7, r4
 1fa:	0039      	movs	r1, r7
 1fc:	4b10      	ldr	r3, [pc, #64]	; (240 <main+0x5c>)
 1fe:	0018      	movs	r0, r3
 200:	f000 fc51 	bl	aa6 <aes_128_ecb_encrypt>



  // Compare the encrypted and decrypted blocks with the expected values
  if (memcmp(out, expected_out, AES_BLOCK_SIZE) != 0) {
 204:	490d      	ldr	r1, [pc, #52]	; (23c <main+0x58>)
 206:	193b      	adds	r3, r7, r4
 208:	2210      	movs	r2, #16
 20a:	0018      	movs	r0, r3
 20c:	f7ff ffc6 	bl	19c <memcmp>
 210:	1e03      	subs	r3, r0, #0
 212:	d002      	beq.n	21a <main+0x36>
    // Error: Encrypted output does not match expected value
    return -1;
 214:	2301      	movs	r3, #1
 216:	425b      	negs	r3, r3
 218:	e00b      	b.n	232 <main+0x4e>
  }

  if (memcmp(in2, in, AES_BLOCK_SIZE) != 0) {
 21a:	490a      	ldr	r1, [pc, #40]	; (244 <main+0x60>)
 21c:	003b      	movs	r3, r7
 21e:	2210      	movs	r2, #16
 220:	0018      	movs	r0, r3
 222:	f7ff ffbb 	bl	19c <memcmp>
 226:	1e03      	subs	r3, r0, #0
 228:	d002      	beq.n	230 <main+0x4c>
    // Error: Decrypted output does not match expected value
    return -1;
 22a:	2301      	movs	r3, #1
 22c:	425b      	negs	r3, r3
 22e:	e000      	b.n	232 <main+0x4e>
  }

  return 0;
 230:	2300      	movs	r3, #0
}
 232:	0018      	movs	r0, r3
 234:	46bd      	mov	r13, r7
 236:	b009      	add	sp, #36	; 0x24
 238:	bd90      	pop	{r4, r7, r15}
 23a:	46c0      	nop			; (mov r8, r8)
 23c:	00000f1c 	.word	0x00000f1c
 240:	00000efc 	.word	0x00000efc
 244:	00000f0c 	.word	0x00000f0c

00000248 <rijndael_mul>:
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

static uint8_t rijndael_mul(uint8_t a, uint8_t b) {
 248:	b580      	push	{r7, r14}
 24a:	b084      	sub	sp, #16
 24c:	af00      	add	r7, sp, #0
 24e:	0002      	movs	r2, r0
 250:	1dfb      	adds	r3, r7, #7
 252:	701a      	strb	r2, [r3, #0]
 254:	1dbb      	adds	r3, r7, #6
 256:	1c0a      	adds	r2, r1, #0
 258:	701a      	strb	r2, [r3, #0]
  uint8_t p = 0;
 25a:	230f      	movs	r3, #15
 25c:	18fb      	adds	r3, r7, r3
 25e:	2200      	movs	r2, #0
 260:	701a      	strb	r2, [r3, #0]
  uint8_t counter;
  for (counter = 0; counter < 8; counter++) {
 262:	230e      	movs	r3, #14
 264:	18fb      	adds	r3, r7, r3
 266:	2200      	movs	r2, #0
 268:	701a      	strb	r2, [r3, #0]
 26a:	e02b      	b.n	2c4 <rijndael_mul+0x7c>
    if (b & 1) {
 26c:	1dbb      	adds	r3, r7, #6
 26e:	781b      	ldrb	r3, [r3, #0]
 270:	2201      	movs	r2, #1
 272:	4013      	ands	r3, r2
 274:	d007      	beq.n	286 <rijndael_mul+0x3e>
      p ^= a;
 276:	220f      	movs	r2, #15
 278:	18bb      	adds	r3, r7, r2
 27a:	18b9      	adds	r1, r7, r2
 27c:	1dfa      	adds	r2, r7, #7
 27e:	7809      	ldrb	r1, [r1, #0]
 280:	7812      	ldrb	r2, [r2, #0]
 282:	404a      	eors	r2, r1
 284:	701a      	strb	r2, [r3, #0]
    }
    if (a & 0x80) {
 286:	1dfb      	adds	r3, r7, #7
 288:	781b      	ldrb	r3, [r3, #0]
 28a:	b25b      	sxtb	r3, r3
 28c:	2b00      	cmp	r3, #0
 28e:	da09      	bge.n	2a4 <rijndael_mul+0x5c>
      a = (a << 1) ^ 0x1b;
 290:	1dfb      	adds	r3, r7, #7
 292:	781b      	ldrb	r3, [r3, #0]
 294:	005b      	lsls	r3, r3, #1
 296:	b25b      	sxtb	r3, r3
 298:	221b      	movs	r2, #27
 29a:	4053      	eors	r3, r2
 29c:	b25a      	sxtb	r2, r3
 29e:	1dfb      	adds	r3, r7, #7
 2a0:	701a      	strb	r2, [r3, #0]
 2a2:	e004      	b.n	2ae <rijndael_mul+0x66>
    } else {
      a <<= 1;
 2a4:	1dfa      	adds	r2, r7, #7
 2a6:	1dfb      	adds	r3, r7, #7
 2a8:	781b      	ldrb	r3, [r3, #0]
 2aa:	18db      	adds	r3, r3, r3
 2ac:	7013      	strb	r3, [r2, #0]
    }
    b >>= 1;
 2ae:	1dbb      	adds	r3, r7, #6
 2b0:	1dba      	adds	r2, r7, #6
 2b2:	7812      	ldrb	r2, [r2, #0]
 2b4:	0852      	lsrs	r2, r2, #1
 2b6:	701a      	strb	r2, [r3, #0]
  for (counter = 0; counter < 8; counter++) {
 2b8:	210e      	movs	r1, #14
 2ba:	187b      	adds	r3, r7, r1
 2bc:	781a      	ldrb	r2, [r3, #0]
 2be:	187b      	adds	r3, r7, r1
 2c0:	3201      	adds	r2, #1
 2c2:	701a      	strb	r2, [r3, #0]
 2c4:	230e      	movs	r3, #14
 2c6:	18fb      	adds	r3, r7, r3
 2c8:	781b      	ldrb	r3, [r3, #0]
 2ca:	2b07      	cmp	r3, #7
 2cc:	d9ce      	bls.n	26c <rijndael_mul+0x24>
  }
  return p;
 2ce:	230f      	movs	r3, #15
 2d0:	18fb      	adds	r3, r7, r3
 2d2:	781b      	ldrb	r3, [r3, #0]
}
 2d4:	0018      	movs	r0, r3
 2d6:	46bd      	mov	r13, r7
 2d8:	b004      	add	sp, #16
 2da:	bd80      	pop	{r7, r15}

000002dc <rijndael_key_schedule>:

static void rijndael_key_schedule(const uint8_t* key, uint8_t* w) {
 2dc:	b5b0      	push	{r4, r5, r7, r14}
 2de:	b084      	sub	sp, #16
 2e0:	af00      	add	r7, sp, #0
 2e2:	6078      	str	r0, [r7, #4]
 2e4:	6039      	str	r1, [r7, #0]
  uint8_t temp[4];
  uint8_t i;

  for (i = 0; i < Nk; i++) {
 2e6:	230f      	movs	r3, #15
 2e8:	18fb      	adds	r3, r7, r3
 2ea:	2200      	movs	r2, #0
 2ec:	701a      	strb	r2, [r3, #0]
 2ee:	e03d      	b.n	36c <rijndael_key_schedule+0x90>
    w[i * 4] = key[i * 4];
 2f0:	200f      	movs	r0, #15
 2f2:	183b      	adds	r3, r7, r0
 2f4:	781b      	ldrb	r3, [r3, #0]
 2f6:	009b      	lsls	r3, r3, #2
 2f8:	001a      	movs	r2, r3
 2fa:	687b      	ldr	r3, [r7, #4]
 2fc:	189a      	adds	r2, r3, r2
 2fe:	183b      	adds	r3, r7, r0
 300:	781b      	ldrb	r3, [r3, #0]
 302:	009b      	lsls	r3, r3, #2
 304:	0019      	movs	r1, r3
 306:	683b      	ldr	r3, [r7, #0]
 308:	185b      	adds	r3, r3, r1
 30a:	7812      	ldrb	r2, [r2, #0]
 30c:	701a      	strb	r2, [r3, #0]
    w[i * 4 + 1] = key[i * 4 + 1];
 30e:	183b      	adds	r3, r7, r0
 310:	781b      	ldrb	r3, [r3, #0]
 312:	009b      	lsls	r3, r3, #2
 314:	3301      	adds	r3, #1
 316:	687a      	ldr	r2, [r7, #4]
 318:	18d2      	adds	r2, r2, r3
 31a:	183b      	adds	r3, r7, r0
 31c:	781b      	ldrb	r3, [r3, #0]
 31e:	009b      	lsls	r3, r3, #2
 320:	3301      	adds	r3, #1
 322:	6839      	ldr	r1, [r7, #0]
 324:	18cb      	adds	r3, r1, r3
 326:	7812      	ldrb	r2, [r2, #0]
 328:	701a      	strb	r2, [r3, #0]
    w[i * 4 + 2] = key[i * 4 + 2];
 32a:	183b      	adds	r3, r7, r0
 32c:	781b      	ldrb	r3, [r3, #0]
 32e:	009b      	lsls	r3, r3, #2
 330:	3302      	adds	r3, #2
 332:	687a      	ldr	r2, [r7, #4]
 334:	18d2      	adds	r2, r2, r3
 336:	183b      	adds	r3, r7, r0
 338:	781b      	ldrb	r3, [r3, #0]
 33a:	009b      	lsls	r3, r3, #2
 33c:	3302      	adds	r3, #2
 33e:	6839      	ldr	r1, [r7, #0]
 340:	18cb      	adds	r3, r1, r3
 342:	7812      	ldrb	r2, [r2, #0]
 344:	701a      	strb	r2, [r3, #0]
    w[i * 4 + 3] = key[i * 4 + 3];
 346:	183b      	adds	r3, r7, r0
 348:	781b      	ldrb	r3, [r3, #0]
 34a:	009b      	lsls	r3, r3, #2
 34c:	3303      	adds	r3, #3
 34e:	687a      	ldr	r2, [r7, #4]
 350:	18d2      	adds	r2, r2, r3
 352:	183b      	adds	r3, r7, r0
 354:	781b      	ldrb	r3, [r3, #0]
 356:	009b      	lsls	r3, r3, #2
 358:	3303      	adds	r3, #3
 35a:	6839      	ldr	r1, [r7, #0]
 35c:	18cb      	adds	r3, r1, r3
 35e:	7812      	ldrb	r2, [r2, #0]
 360:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; i++) {
 362:	183b      	adds	r3, r7, r0
 364:	781a      	ldrb	r2, [r3, #0]
 366:	183b      	adds	r3, r7, r0
 368:	3201      	adds	r2, #1
 36a:	701a      	strb	r2, [r3, #0]
 36c:	220f      	movs	r2, #15
 36e:	18bb      	adds	r3, r7, r2
 370:	781b      	ldrb	r3, [r3, #0]
 372:	2b03      	cmp	r3, #3
 374:	d9bc      	bls.n	2f0 <rijndael_key_schedule+0x14>
  }

  for (i = Nk; i < Nb * (Nr + 1); i++) {
 376:	18bb      	adds	r3, r7, r2
 378:	2204      	movs	r2, #4
 37a:	701a      	strb	r2, [r3, #0]
 37c:	e0b4      	b.n	4e8 <rijndael_key_schedule+0x20c>
    temp[0] = w[(i - 1) * 4];
 37e:	240f      	movs	r4, #15
 380:	193b      	adds	r3, r7, r4
 382:	781b      	ldrb	r3, [r3, #0]
 384:	3b01      	subs	r3, #1
 386:	009b      	lsls	r3, r3, #2
 388:	001a      	movs	r2, r3
 38a:	683b      	ldr	r3, [r7, #0]
 38c:	189b      	adds	r3, r3, r2
 38e:	781a      	ldrb	r2, [r3, #0]
 390:	2108      	movs	r1, #8
 392:	187b      	adds	r3, r7, r1
 394:	701a      	strb	r2, [r3, #0]
    temp[1] = w[(i - 1) * 4 + 1];
 396:	193b      	adds	r3, r7, r4
 398:	781b      	ldrb	r3, [r3, #0]
 39a:	3b01      	subs	r3, #1
 39c:	009b      	lsls	r3, r3, #2
 39e:	3301      	adds	r3, #1
 3a0:	683a      	ldr	r2, [r7, #0]
 3a2:	18d3      	adds	r3, r2, r3
 3a4:	781a      	ldrb	r2, [r3, #0]
 3a6:	187b      	adds	r3, r7, r1
 3a8:	705a      	strb	r2, [r3, #1]
    temp[2] = w[(i - 1) * 4 + 2];
 3aa:	193b      	adds	r3, r7, r4
 3ac:	781b      	ldrb	r3, [r3, #0]
 3ae:	3b01      	subs	r3, #1
 3b0:	009b      	lsls	r3, r3, #2
 3b2:	3302      	adds	r3, #2
 3b4:	683a      	ldr	r2, [r7, #0]
 3b6:	18d3      	adds	r3, r2, r3
 3b8:	781a      	ldrb	r2, [r3, #0]
 3ba:	187b      	adds	r3, r7, r1
 3bc:	709a      	strb	r2, [r3, #2]
    temp[3] = w[(i - 1) * 4 + 3];
 3be:	193b      	adds	r3, r7, r4
 3c0:	781b      	ldrb	r3, [r3, #0]
 3c2:	3b01      	subs	r3, #1
 3c4:	009b      	lsls	r3, r3, #2
 3c6:	3303      	adds	r3, #3
 3c8:	683a      	ldr	r2, [r7, #0]
 3ca:	18d3      	adds	r3, r2, r3
 3cc:	781a      	ldrb	r2, [r3, #0]
 3ce:	187b      	adds	r3, r7, r1
 3d0:	70da      	strb	r2, [r3, #3]
    if (i % Nk == 0) {
 3d2:	193b      	adds	r3, r7, r4
 3d4:	781b      	ldrb	r3, [r3, #0]
 3d6:	2203      	movs	r2, #3
 3d8:	4013      	ands	r3, r2
 3da:	b2db      	uxtb	r3, r3
 3dc:	2b00      	cmp	r3, #0
 3de:	d129      	bne.n	434 <rijndael_key_schedule+0x158>
      temp[0] = sbox[temp[0]];
 3e0:	187b      	adds	r3, r7, r1
 3e2:	781b      	ldrb	r3, [r3, #0]
 3e4:	001a      	movs	r2, r3
 3e6:	4b46      	ldr	r3, [pc, #280]	; (500 <rijndael_key_schedule+0x224>)
 3e8:	5c9a      	ldrb	r2, [r3, r2]
 3ea:	187b      	adds	r3, r7, r1
 3ec:	701a      	strb	r2, [r3, #0]
      temp[1] = sbox[temp[1]];
 3ee:	0008      	movs	r0, r1
 3f0:	187b      	adds	r3, r7, r1
 3f2:	785b      	ldrb	r3, [r3, #1]
 3f4:	001a      	movs	r2, r3
 3f6:	4b42      	ldr	r3, [pc, #264]	; (500 <rijndael_key_schedule+0x224>)
 3f8:	5c9a      	ldrb	r2, [r3, r2]
 3fa:	183b      	adds	r3, r7, r0
 3fc:	705a      	strb	r2, [r3, #1]
      temp[2] = sbox[temp[2]];
 3fe:	183b      	adds	r3, r7, r0
 400:	789b      	ldrb	r3, [r3, #2]
 402:	001a      	movs	r2, r3
 404:	4b3e      	ldr	r3, [pc, #248]	; (500 <rijndael_key_schedule+0x224>)
 406:	5c9a      	ldrb	r2, [r3, r2]
 408:	183b      	adds	r3, r7, r0
 40a:	709a      	strb	r2, [r3, #2]
      temp[3] = sbox[temp[3]];
 40c:	183b      	adds	r3, r7, r0
 40e:	78db      	ldrb	r3, [r3, #3]
 410:	001a      	movs	r2, r3
 412:	4b3b      	ldr	r3, [pc, #236]	; (500 <rijndael_key_schedule+0x224>)
 414:	5c9a      	ldrb	r2, [r3, r2]
 416:	183b      	adds	r3, r7, r0
 418:	70da      	strb	r2, [r3, #3]
      temp[0] ^= rcon[i / Nk - 1];
 41a:	183b      	adds	r3, r7, r0
 41c:	781a      	ldrb	r2, [r3, #0]
 41e:	193b      	adds	r3, r7, r4
 420:	781b      	ldrb	r3, [r3, #0]
 422:	089b      	lsrs	r3, r3, #2
 424:	b2db      	uxtb	r3, r3
 426:	3b01      	subs	r3, #1
 428:	4936      	ldr	r1, [pc, #216]	; (504 <rijndael_key_schedule+0x228>)
 42a:	5ccb      	ldrb	r3, [r1, r3]
 42c:	4053      	eors	r3, r2
 42e:	b2da      	uxtb	r2, r3
 430:	183b      	adds	r3, r7, r0
 432:	701a      	strb	r2, [r3, #0]
      temp[0] = sbox[temp[0]];
      temp[1] = sbox[temp[1]];
      temp[2] = sbox[temp[2]];
      temp[3] = sbox[temp[3]];
    }
    w[i * 4] = w[(i - Nk) * 4] ^ temp[0];
 434:	200f      	movs	r0, #15
 436:	183b      	adds	r3, r7, r0
 438:	781b      	ldrb	r3, [r3, #0]
 43a:	3b04      	subs	r3, #4
 43c:	009b      	lsls	r3, r3, #2
 43e:	001a      	movs	r2, r3
 440:	683b      	ldr	r3, [r7, #0]
 442:	189b      	adds	r3, r3, r2
 444:	7819      	ldrb	r1, [r3, #0]
 446:	2508      	movs	r5, #8
 448:	197b      	adds	r3, r7, r5
 44a:	781a      	ldrb	r2, [r3, #0]
 44c:	0004      	movs	r4, r0
 44e:	183b      	adds	r3, r7, r0
 450:	781b      	ldrb	r3, [r3, #0]
 452:	009b      	lsls	r3, r3, #2
 454:	0018      	movs	r0, r3
 456:	683b      	ldr	r3, [r7, #0]
 458:	181b      	adds	r3, r3, r0
 45a:	404a      	eors	r2, r1
 45c:	b2d2      	uxtb	r2, r2
 45e:	701a      	strb	r2, [r3, #0]
    w[i * 4 + 1] = w[(i - Nk) * 4 + 1] ^ temp[1];
 460:	0020      	movs	r0, r4
 462:	183b      	adds	r3, r7, r0
 464:	781b      	ldrb	r3, [r3, #0]
 466:	3b04      	subs	r3, #4
 468:	009b      	lsls	r3, r3, #2
 46a:	3301      	adds	r3, #1
 46c:	683a      	ldr	r2, [r7, #0]
 46e:	18d3      	adds	r3, r2, r3
 470:	7819      	ldrb	r1, [r3, #0]
 472:	197b      	adds	r3, r7, r5
 474:	785a      	ldrb	r2, [r3, #1]
 476:	0004      	movs	r4, r0
 478:	183b      	adds	r3, r7, r0
 47a:	781b      	ldrb	r3, [r3, #0]
 47c:	009b      	lsls	r3, r3, #2
 47e:	3301      	adds	r3, #1
 480:	6838      	ldr	r0, [r7, #0]
 482:	18c3      	adds	r3, r0, r3
 484:	404a      	eors	r2, r1
 486:	b2d2      	uxtb	r2, r2
 488:	701a      	strb	r2, [r3, #0]
    w[i * 4 + 2] = w[(i - Nk) * 4 + 2] ^ temp[2];
 48a:	0020      	movs	r0, r4
 48c:	183b      	adds	r3, r7, r0
 48e:	781b      	ldrb	r3, [r3, #0]
 490:	3b04      	subs	r3, #4
 492:	009b      	lsls	r3, r3, #2
 494:	3302      	adds	r3, #2
 496:	683a      	ldr	r2, [r7, #0]
 498:	18d3      	adds	r3, r2, r3
 49a:	7819      	ldrb	r1, [r3, #0]
 49c:	197b      	adds	r3, r7, r5
 49e:	789a      	ldrb	r2, [r3, #2]
 4a0:	0004      	movs	r4, r0
 4a2:	183b      	adds	r3, r7, r0
 4a4:	781b      	ldrb	r3, [r3, #0]
 4a6:	009b      	lsls	r3, r3, #2
 4a8:	3302      	adds	r3, #2
 4aa:	6838      	ldr	r0, [r7, #0]
 4ac:	18c3      	adds	r3, r0, r3
 4ae:	404a      	eors	r2, r1
 4b0:	b2d2      	uxtb	r2, r2
 4b2:	701a      	strb	r2, [r3, #0]
    w[i * 4 + 3] = w[(i - Nk) * 4 + 3] ^ temp[3];
 4b4:	0020      	movs	r0, r4
 4b6:	183b      	adds	r3, r7, r0
 4b8:	781b      	ldrb	r3, [r3, #0]
 4ba:	3b04      	subs	r3, #4
 4bc:	009b      	lsls	r3, r3, #2
 4be:	3303      	adds	r3, #3
 4c0:	683a      	ldr	r2, [r7, #0]
 4c2:	18d3      	adds	r3, r2, r3
 4c4:	7819      	ldrb	r1, [r3, #0]
 4c6:	197b      	adds	r3, r7, r5
 4c8:	78da      	ldrb	r2, [r3, #3]
 4ca:	0004      	movs	r4, r0
 4cc:	183b      	adds	r3, r7, r0
 4ce:	781b      	ldrb	r3, [r3, #0]
 4d0:	009b      	lsls	r3, r3, #2
 4d2:	3303      	adds	r3, #3
 4d4:	6838      	ldr	r0, [r7, #0]
 4d6:	18c3      	adds	r3, r0, r3
 4d8:	404a      	eors	r2, r1
 4da:	b2d2      	uxtb	r2, r2
 4dc:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); i++) {
 4de:	193b      	adds	r3, r7, r4
 4e0:	781a      	ldrb	r2, [r3, #0]
 4e2:	193b      	adds	r3, r7, r4
 4e4:	3201      	adds	r2, #1
 4e6:	701a      	strb	r2, [r3, #0]
 4e8:	230f      	movs	r3, #15
 4ea:	18fb      	adds	r3, r7, r3
 4ec:	781b      	ldrb	r3, [r3, #0]
 4ee:	2b2b      	cmp	r3, #43	; 0x2b
 4f0:	d800      	bhi.n	4f4 <rijndael_key_schedule+0x218>
 4f2:	e744      	b.n	37e <rijndael_key_schedule+0xa2>
  }
}
 4f4:	46c0      	nop			; (mov r8, r8)
 4f6:	46c0      	nop			; (mov r8, r8)
 4f8:	46bd      	mov	r13, r7
 4fa:	b004      	add	sp, #16
 4fc:	bdb0      	pop	{r4, r5, r7, r15}
 4fe:	46c0      	nop			; (mov r8, r8)
 500:	00000f2c 	.word	0x00000f2c
 504:	0000102c 	.word	0x0000102c

00000508 <rijndael_add_round_key>:

static void rijndael_add_round_key(uint8_t* state, const uint8_t* w, uint8_t round) {
 508:	b590      	push	{r4, r7, r14}
 50a:	b087      	sub	sp, #28
 50c:	af00      	add	r7, sp, #0
 50e:	60f8      	str	r0, [r7, #12]
 510:	60b9      	str	r1, [r7, #8]
 512:	1dfb      	adds	r3, r7, #7
 514:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  for (i = 0; i < 16; i++) {
 516:	2317      	movs	r3, #23
 518:	18fb      	adds	r3, r7, r3
 51a:	2200      	movs	r2, #0
 51c:	701a      	strb	r2, [r3, #0]
 51e:	e01b      	b.n	558 <rijndael_add_round_key+0x50>
    state[i] ^= w[round * Nb * 4 + i];
 520:	2417      	movs	r4, #23
 522:	193b      	adds	r3, r7, r4
 524:	781b      	ldrb	r3, [r3, #0]
 526:	68fa      	ldr	r2, [r7, #12]
 528:	18d3      	adds	r3, r2, r3
 52a:	7819      	ldrb	r1, [r3, #0]
 52c:	1dfb      	adds	r3, r7, #7
 52e:	781b      	ldrb	r3, [r3, #0]
 530:	011a      	lsls	r2, r3, #4
 532:	193b      	adds	r3, r7, r4
 534:	781b      	ldrb	r3, [r3, #0]
 536:	18d3      	adds	r3, r2, r3
 538:	001a      	movs	r2, r3
 53a:	68bb      	ldr	r3, [r7, #8]
 53c:	189b      	adds	r3, r3, r2
 53e:	781a      	ldrb	r2, [r3, #0]
 540:	193b      	adds	r3, r7, r4
 542:	781b      	ldrb	r3, [r3, #0]
 544:	68f8      	ldr	r0, [r7, #12]
 546:	18c3      	adds	r3, r0, r3
 548:	404a      	eors	r2, r1
 54a:	b2d2      	uxtb	r2, r2
 54c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 16; i++) {
 54e:	193b      	adds	r3, r7, r4
 550:	781a      	ldrb	r2, [r3, #0]
 552:	193b      	adds	r3, r7, r4
 554:	3201      	adds	r2, #1
 556:	701a      	strb	r2, [r3, #0]
 558:	2317      	movs	r3, #23
 55a:	18fb      	adds	r3, r7, r3
 55c:	781b      	ldrb	r3, [r3, #0]
 55e:	2b0f      	cmp	r3, #15
 560:	d9de      	bls.n	520 <rijndael_add_round_key+0x18>
  }
}
 562:	46c0      	nop			; (mov r8, r8)
 564:	46c0      	nop			; (mov r8, r8)
 566:	46bd      	mov	r13, r7
 568:	b007      	add	sp, #28
 56a:	bd90      	pop	{r4, r7, r15}

0000056c <rijndael_sub_bytes>:

static void rijndael_sub_bytes(uint8_t* state) {
 56c:	b580      	push	{r7, r14}
 56e:	b084      	sub	sp, #16
 570:	af00      	add	r7, sp, #0
 572:	6078      	str	r0, [r7, #4]
  uint8_t i;
  for (i = 0; i < 16; i++) {
 574:	230f      	movs	r3, #15
 576:	18fb      	adds	r3, r7, r3
 578:	2200      	movs	r2, #0
 57a:	701a      	strb	r2, [r3, #0]
 57c:	e012      	b.n	5a4 <rijndael_sub_bytes+0x38>
    state[i] = sbox[state[i]];
 57e:	200f      	movs	r0, #15
 580:	183b      	adds	r3, r7, r0
 582:	781b      	ldrb	r3, [r3, #0]
 584:	687a      	ldr	r2, [r7, #4]
 586:	18d3      	adds	r3, r2, r3
 588:	781b      	ldrb	r3, [r3, #0]
 58a:	0019      	movs	r1, r3
 58c:	183b      	adds	r3, r7, r0
 58e:	781b      	ldrb	r3, [r3, #0]
 590:	687a      	ldr	r2, [r7, #4]
 592:	18d3      	adds	r3, r2, r3
 594:	4a08      	ldr	r2, [pc, #32]	; (5b8 <rijndael_sub_bytes+0x4c>)
 596:	5c52      	ldrb	r2, [r2, r1]
 598:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 16; i++) {
 59a:	183b      	adds	r3, r7, r0
 59c:	781a      	ldrb	r2, [r3, #0]
 59e:	183b      	adds	r3, r7, r0
 5a0:	3201      	adds	r2, #1
 5a2:	701a      	strb	r2, [r3, #0]
 5a4:	230f      	movs	r3, #15
 5a6:	18fb      	adds	r3, r7, r3
 5a8:	781b      	ldrb	r3, [r3, #0]
 5aa:	2b0f      	cmp	r3, #15
 5ac:	d9e7      	bls.n	57e <rijndael_sub_bytes+0x12>
  }
}
 5ae:	46c0      	nop			; (mov r8, r8)
 5b0:	46c0      	nop			; (mov r8, r8)
 5b2:	46bd      	mov	r13, r7
 5b4:	b004      	add	sp, #16
 5b6:	bd80      	pop	{r7, r15}
 5b8:	00000f2c 	.word	0x00000f2c

000005bc <rijndael_shift_rows>:

  //  |  0  4  8 12 |     |  0  4  8 12 |
  //  |  1  5  9 13 |  => |  5  9 13  1 |
  //  |  2  6 10 14 |     | 10 14  2  6 |
  //  |  3  7 11 15 |     | 15  3  7 11 |
static void rijndael_shift_rows(uint8_t* state) {
 5bc:	b580      	push	{r7, r14}
 5be:	b084      	sub	sp, #16
 5c0:	af00      	add	r7, sp, #0
 5c2:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Shift row 1
  temp = state[1];
 5c4:	210f      	movs	r1, #15
 5c6:	187b      	adds	r3, r7, r1
 5c8:	687a      	ldr	r2, [r7, #4]
 5ca:	7852      	ldrb	r2, [r2, #1]
 5cc:	701a      	strb	r2, [r3, #0]
  state[1] = state[5];
 5ce:	687b      	ldr	r3, [r7, #4]
 5d0:	3301      	adds	r3, #1
 5d2:	687a      	ldr	r2, [r7, #4]
 5d4:	7952      	ldrb	r2, [r2, #5]
 5d6:	701a      	strb	r2, [r3, #0]
  state[5] = state[9];
 5d8:	687b      	ldr	r3, [r7, #4]
 5da:	3305      	adds	r3, #5
 5dc:	687a      	ldr	r2, [r7, #4]
 5de:	7a52      	ldrb	r2, [r2, #9]
 5e0:	701a      	strb	r2, [r3, #0]
  state[9] = state[13];
 5e2:	687b      	ldr	r3, [r7, #4]
 5e4:	3309      	adds	r3, #9
 5e6:	687a      	ldr	r2, [r7, #4]
 5e8:	7b52      	ldrb	r2, [r2, #13]
 5ea:	701a      	strb	r2, [r3, #0]
  state[13] = temp;
 5ec:	687b      	ldr	r3, [r7, #4]
 5ee:	330d      	adds	r3, #13
 5f0:	187a      	adds	r2, r7, r1
 5f2:	7812      	ldrb	r2, [r2, #0]
 5f4:	701a      	strb	r2, [r3, #0]

  // Shift row 2
  temp = state[2];
 5f6:	187b      	adds	r3, r7, r1
 5f8:	687a      	ldr	r2, [r7, #4]
 5fa:	7892      	ldrb	r2, [r2, #2]
 5fc:	701a      	strb	r2, [r3, #0]
  state[2] = state[10];
 5fe:	687b      	ldr	r3, [r7, #4]
 600:	3302      	adds	r3, #2
 602:	687a      	ldr	r2, [r7, #4]
 604:	7a92      	ldrb	r2, [r2, #10]
 606:	701a      	strb	r2, [r3, #0]
  state[10] = temp;
 608:	687b      	ldr	r3, [r7, #4]
 60a:	330a      	adds	r3, #10
 60c:	187a      	adds	r2, r7, r1
 60e:	7812      	ldrb	r2, [r2, #0]
 610:	701a      	strb	r2, [r3, #0]
  temp = state[6];
 612:	187b      	adds	r3, r7, r1
 614:	687a      	ldr	r2, [r7, #4]
 616:	7992      	ldrb	r2, [r2, #6]
 618:	701a      	strb	r2, [r3, #0]
  state[6] = state[14];
 61a:	687b      	ldr	r3, [r7, #4]
 61c:	3306      	adds	r3, #6
 61e:	687a      	ldr	r2, [r7, #4]
 620:	7b92      	ldrb	r2, [r2, #14]
 622:	701a      	strb	r2, [r3, #0]
  state[14] = temp;
 624:	687b      	ldr	r3, [r7, #4]
 626:	330e      	adds	r3, #14
 628:	187a      	adds	r2, r7, r1
 62a:	7812      	ldrb	r2, [r2, #0]
 62c:	701a      	strb	r2, [r3, #0]

  // Shift row 3
  temp = state[15];
 62e:	187b      	adds	r3, r7, r1
 630:	687a      	ldr	r2, [r7, #4]
 632:	7bd2      	ldrb	r2, [r2, #15]
 634:	701a      	strb	r2, [r3, #0]
  state[15] = state[11];
 636:	687b      	ldr	r3, [r7, #4]
 638:	330f      	adds	r3, #15
 63a:	687a      	ldr	r2, [r7, #4]
 63c:	7ad2      	ldrb	r2, [r2, #11]
 63e:	701a      	strb	r2, [r3, #0]
  state[11] = state[7];
 640:	687b      	ldr	r3, [r7, #4]
 642:	330b      	adds	r3, #11
 644:	687a      	ldr	r2, [r7, #4]
 646:	79d2      	ldrb	r2, [r2, #7]
 648:	701a      	strb	r2, [r3, #0]
  state[7] = state[3];
 64a:	687b      	ldr	r3, [r7, #4]
 64c:	3307      	adds	r3, #7
 64e:	687a      	ldr	r2, [r7, #4]
 650:	78d2      	ldrb	r2, [r2, #3]
 652:	701a      	strb	r2, [r3, #0]
  state[3] = temp;
 654:	687b      	ldr	r3, [r7, #4]
 656:	3303      	adds	r3, #3
 658:	187a      	adds	r2, r7, r1
 65a:	7812      	ldrb	r2, [r2, #0]
 65c:	701a      	strb	r2, [r3, #0]
}
 65e:	46c0      	nop			; (mov r8, r8)
 660:	46bd      	mov	r13, r7
 662:	b004      	add	sp, #16
 664:	bd80      	pop	{r7, r15}

00000666 <rijndael_mix_columns>:

static void rijndael_mix_columns(uint8_t* state) {
 666:	b5f0      	push	{r4, r5, r6, r7, r14}
 668:	b085      	sub	sp, #20
 66a:	af00      	add	r7, sp, #0
 66c:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t a[4];
  for (i = 0; i < 4; i++) {
 66e:	230f      	movs	r3, #15
 670:	18fb      	adds	r3, r7, r3
 672:	2200      	movs	r2, #0
 674:	701a      	strb	r2, [r3, #0]
 676:	e0a7      	b.n	7c8 <rijndael_mix_columns+0x162>
    a[0] = state[i];
 678:	260f      	movs	r6, #15
 67a:	19bb      	adds	r3, r7, r6
 67c:	781b      	ldrb	r3, [r3, #0]
 67e:	687a      	ldr	r2, [r7, #4]
 680:	18d3      	adds	r3, r2, r3
 682:	781a      	ldrb	r2, [r3, #0]
 684:	2108      	movs	r1, #8
 686:	187b      	adds	r3, r7, r1
 688:	701a      	strb	r2, [r3, #0]
    a[1] = state[i + 4];
 68a:	19bb      	adds	r3, r7, r6
 68c:	781b      	ldrb	r3, [r3, #0]
 68e:	3304      	adds	r3, #4
 690:	687a      	ldr	r2, [r7, #4]
 692:	18d3      	adds	r3, r2, r3
 694:	781a      	ldrb	r2, [r3, #0]
 696:	187b      	adds	r3, r7, r1
 698:	705a      	strb	r2, [r3, #1]
    a[2] = state[i + 8];
 69a:	19bb      	adds	r3, r7, r6
 69c:	781b      	ldrb	r3, [r3, #0]
 69e:	3308      	adds	r3, #8
 6a0:	687a      	ldr	r2, [r7, #4]
 6a2:	18d3      	adds	r3, r2, r3
 6a4:	781a      	ldrb	r2, [r3, #0]
 6a6:	187b      	adds	r3, r7, r1
 6a8:	709a      	strb	r2, [r3, #2]
    a[3] = state[i + 12];
 6aa:	19bb      	adds	r3, r7, r6
 6ac:	781b      	ldrb	r3, [r3, #0]
 6ae:	330c      	adds	r3, #12
 6b0:	687a      	ldr	r2, [r7, #4]
 6b2:	18d3      	adds	r3, r2, r3
 6b4:	781a      	ldrb	r2, [r3, #0]
 6b6:	000d      	movs	r5, r1
 6b8:	197b      	adds	r3, r7, r5
 6ba:	70da      	strb	r2, [r3, #3]
    state[i] = rijndael_mul(a[0], 2) ^ rijndael_mul(a[1], 3) ^ a[2] ^ a[3];
 6bc:	197b      	adds	r3, r7, r5
 6be:	781b      	ldrb	r3, [r3, #0]
 6c0:	2102      	movs	r1, #2
 6c2:	0018      	movs	r0, r3
 6c4:	f7ff fdc0 	bl	248 <rijndael_mul>
 6c8:	0003      	movs	r3, r0
 6ca:	001c      	movs	r4, r3
 6cc:	197b      	adds	r3, r7, r5
 6ce:	785b      	ldrb	r3, [r3, #1]
 6d0:	2103      	movs	r1, #3
 6d2:	0018      	movs	r0, r3
 6d4:	f7ff fdb8 	bl	248 <rijndael_mul>
 6d8:	0003      	movs	r3, r0
 6da:	4063      	eors	r3, r4
 6dc:	b2da      	uxtb	r2, r3
 6de:	002c      	movs	r4, r5
 6e0:	193b      	adds	r3, r7, r4
 6e2:	789b      	ldrb	r3, [r3, #2]
 6e4:	4053      	eors	r3, r2
 6e6:	b2d9      	uxtb	r1, r3
 6e8:	193b      	adds	r3, r7, r4
 6ea:	78da      	ldrb	r2, [r3, #3]
 6ec:	19bb      	adds	r3, r7, r6
 6ee:	781b      	ldrb	r3, [r3, #0]
 6f0:	6878      	ldr	r0, [r7, #4]
 6f2:	18c3      	adds	r3, r0, r3
 6f4:	404a      	eors	r2, r1
 6f6:	b2d2      	uxtb	r2, r2
 6f8:	701a      	strb	r2, [r3, #0]
    state[i + 4] = a[0] ^ rijndael_mul(a[1], 2) ^ rijndael_mul(a[2], 3) ^ a[3];
 6fa:	0025      	movs	r5, r4
 6fc:	197b      	adds	r3, r7, r5
 6fe:	781c      	ldrb	r4, [r3, #0]
 700:	197b      	adds	r3, r7, r5
 702:	785b      	ldrb	r3, [r3, #1]
 704:	2102      	movs	r1, #2
 706:	0018      	movs	r0, r3
 708:	f7ff fd9e 	bl	248 <rijndael_mul>
 70c:	0003      	movs	r3, r0
 70e:	4063      	eors	r3, r4
 710:	b2dc      	uxtb	r4, r3
 712:	197b      	adds	r3, r7, r5
 714:	789b      	ldrb	r3, [r3, #2]
 716:	2103      	movs	r1, #3
 718:	0018      	movs	r0, r3
 71a:	f7ff fd95 	bl	248 <rijndael_mul>
 71e:	0003      	movs	r3, r0
 720:	4063      	eors	r3, r4
 722:	b2d9      	uxtb	r1, r3
 724:	002c      	movs	r4, r5
 726:	193b      	adds	r3, r7, r4
 728:	78da      	ldrb	r2, [r3, #3]
 72a:	19bb      	adds	r3, r7, r6
 72c:	781b      	ldrb	r3, [r3, #0]
 72e:	3304      	adds	r3, #4
 730:	6878      	ldr	r0, [r7, #4]
 732:	18c3      	adds	r3, r0, r3
 734:	404a      	eors	r2, r1
 736:	b2d2      	uxtb	r2, r2
 738:	701a      	strb	r2, [r3, #0]
    state[i + 8] = a[0] ^ a[1] ^ rijndael_mul(a[2], 2) ^ rijndael_mul(a[3], 3);
 73a:	0025      	movs	r5, r4
 73c:	197b      	adds	r3, r7, r5
 73e:	781a      	ldrb	r2, [r3, #0]
 740:	197b      	adds	r3, r7, r5
 742:	785b      	ldrb	r3, [r3, #1]
 744:	4053      	eors	r3, r2
 746:	b2dc      	uxtb	r4, r3
 748:	197b      	adds	r3, r7, r5
 74a:	789b      	ldrb	r3, [r3, #2]
 74c:	2102      	movs	r1, #2
 74e:	0018      	movs	r0, r3
 750:	f7ff fd7a 	bl	248 <rijndael_mul>
 754:	0003      	movs	r3, r0
 756:	4063      	eors	r3, r4
 758:	b2dc      	uxtb	r4, r3
 75a:	197b      	adds	r3, r7, r5
 75c:	78db      	ldrb	r3, [r3, #3]
 75e:	2103      	movs	r1, #3
 760:	0018      	movs	r0, r3
 762:	f7ff fd71 	bl	248 <rijndael_mul>
 766:	0003      	movs	r3, r0
 768:	0019      	movs	r1, r3
 76a:	19bb      	adds	r3, r7, r6
 76c:	781b      	ldrb	r3, [r3, #0]
 76e:	3308      	adds	r3, #8
 770:	687a      	ldr	r2, [r7, #4]
 772:	18d3      	adds	r3, r2, r3
 774:	0022      	movs	r2, r4
 776:	404a      	eors	r2, r1
 778:	b2d2      	uxtb	r2, r2
 77a:	701a      	strb	r2, [r3, #0]
    state[i + 12] = rijndael_mul(a[0], 3) ^ a[1] ^ a[2] ^ rijndael_mul(a[3], 2);
 77c:	197b      	adds	r3, r7, r5
 77e:	781b      	ldrb	r3, [r3, #0]
 780:	2103      	movs	r1, #3
 782:	0018      	movs	r0, r3
 784:	f7ff fd60 	bl	248 <rijndael_mul>
 788:	0003      	movs	r3, r0
 78a:	001a      	movs	r2, r3
 78c:	197b      	adds	r3, r7, r5
 78e:	785b      	ldrb	r3, [r3, #1]
 790:	4053      	eors	r3, r2
 792:	b2da      	uxtb	r2, r3
 794:	197b      	adds	r3, r7, r5
 796:	789b      	ldrb	r3, [r3, #2]
 798:	4053      	eors	r3, r2
 79a:	b2dc      	uxtb	r4, r3
 79c:	197b      	adds	r3, r7, r5
 79e:	78db      	ldrb	r3, [r3, #3]
 7a0:	2102      	movs	r1, #2
 7a2:	0018      	movs	r0, r3
 7a4:	f7ff fd50 	bl	248 <rijndael_mul>
 7a8:	0003      	movs	r3, r0
 7aa:	0019      	movs	r1, r3
 7ac:	19bb      	adds	r3, r7, r6
 7ae:	781b      	ldrb	r3, [r3, #0]
 7b0:	330c      	adds	r3, #12
 7b2:	687a      	ldr	r2, [r7, #4]
 7b4:	18d3      	adds	r3, r2, r3
 7b6:	0022      	movs	r2, r4
 7b8:	404a      	eors	r2, r1
 7ba:	b2d2      	uxtb	r2, r2
 7bc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; i++) {
 7be:	19bb      	adds	r3, r7, r6
 7c0:	781a      	ldrb	r2, [r3, #0]
 7c2:	19bb      	adds	r3, r7, r6
 7c4:	3201      	adds	r2, #1
 7c6:	701a      	strb	r2, [r3, #0]
 7c8:	230f      	movs	r3, #15
 7ca:	18fb      	adds	r3, r7, r3
 7cc:	781b      	ldrb	r3, [r3, #0]
 7ce:	2b03      	cmp	r3, #3
 7d0:	d800      	bhi.n	7d4 <rijndael_mix_columns+0x16e>
 7d2:	e751      	b.n	678 <rijndael_mix_columns+0x12>
  }
}
 7d4:	46c0      	nop			; (mov r8, r8)
 7d6:	46c0      	nop			; (mov r8, r8)
 7d8:	46bd      	mov	r13, r7
 7da:	b005      	add	sp, #20
 7dc:	bdf0      	pop	{r4, r5, r6, r7, r15}
	...

000007e0 <rijndael_inv_sub_bytes>:

static void rijndael_inv_sub_bytes(uint8_t* state) {
 7e0:	b580      	push	{r7, r14}
 7e2:	b084      	sub	sp, #16
 7e4:	af00      	add	r7, sp, #0
 7e6:	6078      	str	r0, [r7, #4]
  uint8_t i;
  for (i = 0; i <16; i++) {
 7e8:	230f      	movs	r3, #15
 7ea:	18fb      	adds	r3, r7, r3
 7ec:	2200      	movs	r2, #0
 7ee:	701a      	strb	r2, [r3, #0]
 7f0:	e012      	b.n	818 <_Min_Heap_Size+0x18>
    state[i] = inv_sbox[state[i]];
 7f2:	200f      	movs	r0, #15
 7f4:	183b      	adds	r3, r7, r0
 7f6:	781b      	ldrb	r3, [r3, #0]
 7f8:	687a      	ldr	r2, [r7, #4]
 7fa:	18d3      	adds	r3, r2, r3
 7fc:	781b      	ldrb	r3, [r3, #0]
 7fe:	0019      	movs	r1, r3
 800:	183b      	adds	r3, r7, r0
 802:	781b      	ldrb	r3, [r3, #0]
 804:	687a      	ldr	r2, [r7, #4]
 806:	18d3      	adds	r3, r2, r3
 808:	4a08      	ldr	r2, [pc, #32]	; (82c <_Min_Heap_Size+0x2c>)
 80a:	5c52      	ldrb	r2, [r2, r1]
 80c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i <16; i++) {
 80e:	183b      	adds	r3, r7, r0
 810:	781a      	ldrb	r2, [r3, #0]
 812:	183b      	adds	r3, r7, r0
 814:	3201      	adds	r2, #1
 816:	701a      	strb	r2, [r3, #0]
 818:	230f      	movs	r3, #15
 81a:	18fb      	adds	r3, r7, r3
 81c:	781b      	ldrb	r3, [r3, #0]
 81e:	2b0f      	cmp	r3, #15
 820:	d9e7      	bls.n	7f2 <rijndael_inv_sub_bytes+0x12>
  }
}
 822:	46c0      	nop			; (mov r8, r8)
 824:	46c0      	nop			; (mov r8, r8)
 826:	46bd      	mov	r13, r7
 828:	b004      	add	sp, #16
 82a:	bd80      	pop	{r7, r15}
 82c:	00001038 	.word	0x00001038

00000830 <rijndael_inv_shift_rows>:

static void rijndael_inv_shift_rows(uint8_t* state) {
 830:	b580      	push	{r7, r14}
 832:	b084      	sub	sp, #16
 834:	af00      	add	r7, sp, #0
 836:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Shift row 1
  temp = state[13];
 838:	210f      	movs	r1, #15
 83a:	187b      	adds	r3, r7, r1
 83c:	687a      	ldr	r2, [r7, #4]
 83e:	7b52      	ldrb	r2, [r2, #13]
 840:	701a      	strb	r2, [r3, #0]
  state[13] = state[9];
 842:	687b      	ldr	r3, [r7, #4]
 844:	330d      	adds	r3, #13
 846:	687a      	ldr	r2, [r7, #4]
 848:	7a52      	ldrb	r2, [r2, #9]
 84a:	701a      	strb	r2, [r3, #0]
  state[9] = state[5];
 84c:	687b      	ldr	r3, [r7, #4]
 84e:	3309      	adds	r3, #9
 850:	687a      	ldr	r2, [r7, #4]
 852:	7952      	ldrb	r2, [r2, #5]
 854:	701a      	strb	r2, [r3, #0]
  state[5] = state[1];
 856:	687b      	ldr	r3, [r7, #4]
 858:	3305      	adds	r3, #5
 85a:	687a      	ldr	r2, [r7, #4]
 85c:	7852      	ldrb	r2, [r2, #1]
 85e:	701a      	strb	r2, [r3, #0]
  state[1] = temp;
 860:	687b      	ldr	r3, [r7, #4]
 862:	3301      	adds	r3, #1
 864:	187a      	adds	r2, r7, r1
 866:	7812      	ldrb	r2, [r2, #0]
 868:	701a      	strb	r2, [r3, #0]

  // Shift row 2
  temp = state[14];
 86a:	187b      	adds	r3, r7, r1
 86c:	687a      	ldr	r2, [r7, #4]
 86e:	7b92      	ldrb	r2, [r2, #14]
 870:	701a      	strb	r2, [r3, #0]
  state[14] = state[6];
 872:	687b      	ldr	r3, [r7, #4]
 874:	330e      	adds	r3, #14
 876:	687a      	ldr	r2, [r7, #4]
 878:	7992      	ldrb	r2, [r2, #6]
 87a:	701a      	strb	r2, [r3, #0]
  state[6] = temp;
 87c:	687b      	ldr	r3, [r7, #4]
 87e:	3306      	adds	r3, #6
 880:	187a      	adds	r2, r7, r1
 882:	7812      	ldrb	r2, [r2, #0]
 884:	701a      	strb	r2, [r3, #0]
  temp = state[10];
 886:	187b      	adds	r3, r7, r1
 888:	687a      	ldr	r2, [r7, #4]
 88a:	7a92      	ldrb	r2, [r2, #10]
 88c:	701a      	strb	r2, [r3, #0]
  state[10] = state[2];
 88e:	687b      	ldr	r3, [r7, #4]
 890:	330a      	adds	r3, #10
 892:	687a      	ldr	r2, [r7, #4]
 894:	7892      	ldrb	r2, [r2, #2]
 896:	701a      	strb	r2, [r3, #0]
  state[2] = temp;
 898:	687b      	ldr	r3, [r7, #4]
 89a:	3302      	adds	r3, #2
 89c:	187a      	adds	r2, r7, r1
 89e:	7812      	ldrb	r2, [r2, #0]
 8a0:	701a      	strb	r2, [r3, #0]

  // Shift row 3
  temp = state[3];
 8a2:	187b      	adds	r3, r7, r1
 8a4:	687a      	ldr	r2, [r7, #4]
 8a6:	78d2      	ldrb	r2, [r2, #3]
 8a8:	701a      	strb	r2, [r3, #0]
  state[3] = state[7];
 8aa:	687b      	ldr	r3, [r7, #4]
 8ac:	3303      	adds	r3, #3
 8ae:	687a      	ldr	r2, [r7, #4]
 8b0:	79d2      	ldrb	r2, [r2, #7]
 8b2:	701a      	strb	r2, [r3, #0]
  state[7] = state[11];
 8b4:	687b      	ldr	r3, [r7, #4]
 8b6:	3307      	adds	r3, #7
 8b8:	687a      	ldr	r2, [r7, #4]
 8ba:	7ad2      	ldrb	r2, [r2, #11]
 8bc:	701a      	strb	r2, [r3, #0]
  state[11] = state[15];
 8be:	687b      	ldr	r3, [r7, #4]
 8c0:	330b      	adds	r3, #11
 8c2:	687a      	ldr	r2, [r7, #4]
 8c4:	7bd2      	ldrb	r2, [r2, #15]
 8c6:	701a      	strb	r2, [r3, #0]
  state[15] = temp;
 8c8:	687b      	ldr	r3, [r7, #4]
 8ca:	330f      	adds	r3, #15
 8cc:	187a      	adds	r2, r7, r1
 8ce:	7812      	ldrb	r2, [r2, #0]
 8d0:	701a      	strb	r2, [r3, #0]
}
 8d2:	46c0      	nop			; (mov r8, r8)
 8d4:	46bd      	mov	r13, r7
 8d6:	b004      	add	sp, #16
 8d8:	bd80      	pop	{r7, r15}

000008da <rijndael_inv_mix_columns>:

static void rijndael_inv_mix_columns(uint8_t* state) {
 8da:	b5f0      	push	{r4, r5, r6, r7, r14}
 8dc:	b085      	sub	sp, #20
 8de:	af00      	add	r7, sp, #0
 8e0:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t a[4];
  for (i = 0; i < 4; i++) {
 8e2:	230f      	movs	r3, #15
 8e4:	18fb      	adds	r3, r7, r3
 8e6:	2200      	movs	r2, #0
 8e8:	701a      	strb	r2, [r3, #0]
 8ea:	e0d1      	b.n	a90 <rijndael_inv_mix_columns+0x1b6>
    a[0] = state[i];
 8ec:	260f      	movs	r6, #15
 8ee:	19bb      	adds	r3, r7, r6
 8f0:	781b      	ldrb	r3, [r3, #0]
 8f2:	687a      	ldr	r2, [r7, #4]
 8f4:	18d3      	adds	r3, r2, r3
 8f6:	781a      	ldrb	r2, [r3, #0]
 8f8:	2108      	movs	r1, #8
 8fa:	187b      	adds	r3, r7, r1
 8fc:	701a      	strb	r2, [r3, #0]
    a[1] = state[i + 4];
 8fe:	19bb      	adds	r3, r7, r6
 900:	781b      	ldrb	r3, [r3, #0]
 902:	3304      	adds	r3, #4
 904:	687a      	ldr	r2, [r7, #4]
 906:	18d3      	adds	r3, r2, r3
 908:	781a      	ldrb	r2, [r3, #0]
 90a:	187b      	adds	r3, r7, r1
 90c:	705a      	strb	r2, [r3, #1]
    a[2] = state[i + 8];
 90e:	19bb      	adds	r3, r7, r6
 910:	781b      	ldrb	r3, [r3, #0]
 912:	3308      	adds	r3, #8
 914:	687a      	ldr	r2, [r7, #4]
 916:	18d3      	adds	r3, r2, r3
 918:	781a      	ldrb	r2, [r3, #0]
 91a:	187b      	adds	r3, r7, r1
 91c:	709a      	strb	r2, [r3, #2]
    a[3] = state[i + 12];
 91e:	19bb      	adds	r3, r7, r6
 920:	781b      	ldrb	r3, [r3, #0]
 922:	330c      	adds	r3, #12
 924:	687a      	ldr	r2, [r7, #4]
 926:	18d3      	adds	r3, r2, r3
 928:	781a      	ldrb	r2, [r3, #0]
 92a:	000d      	movs	r5, r1
 92c:	197b      	adds	r3, r7, r5
 92e:	70da      	strb	r2, [r3, #3]
    state[i] = rijndael_mul(a[0], 0xe) ^ rijndael_mul(a[1], 0xb) ^ rijndael_mul(a[2], 0xd) ^ rijndael_mul(a[3], 0x9);
 930:	197b      	adds	r3, r7, r5
 932:	781b      	ldrb	r3, [r3, #0]
 934:	210e      	movs	r1, #14
 936:	0018      	movs	r0, r3
 938:	f7ff fc86 	bl	248 <rijndael_mul>
 93c:	0003      	movs	r3, r0
 93e:	001c      	movs	r4, r3
 940:	197b      	adds	r3, r7, r5
 942:	785b      	ldrb	r3, [r3, #1]
 944:	210b      	movs	r1, #11
 946:	0018      	movs	r0, r3
 948:	f7ff fc7e 	bl	248 <rijndael_mul>
 94c:	0003      	movs	r3, r0
 94e:	4063      	eors	r3, r4
 950:	b2dc      	uxtb	r4, r3
 952:	197b      	adds	r3, r7, r5
 954:	789b      	ldrb	r3, [r3, #2]
 956:	210d      	movs	r1, #13
 958:	0018      	movs	r0, r3
 95a:	f7ff fc75 	bl	248 <rijndael_mul>
 95e:	0003      	movs	r3, r0
 960:	4063      	eors	r3, r4
 962:	b2dc      	uxtb	r4, r3
 964:	197b      	adds	r3, r7, r5
 966:	78db      	ldrb	r3, [r3, #3]
 968:	2109      	movs	r1, #9
 96a:	0018      	movs	r0, r3
 96c:	f7ff fc6c 	bl	248 <rijndael_mul>
 970:	0003      	movs	r3, r0
 972:	0019      	movs	r1, r3
 974:	19bb      	adds	r3, r7, r6
 976:	781b      	ldrb	r3, [r3, #0]
 978:	687a      	ldr	r2, [r7, #4]
 97a:	18d3      	adds	r3, r2, r3
 97c:	0022      	movs	r2, r4
 97e:	404a      	eors	r2, r1
 980:	b2d2      	uxtb	r2, r2
 982:	701a      	strb	r2, [r3, #0]
    state[i + 4] = rijndael_mul(a[0], 0x9) ^ rijndael_mul(a[1], 0xe) ^ rijndael_mul(a[2], 0xb) ^ rijndael_mul(a[3], 0xd);
 984:	197b      	adds	r3, r7, r5
 986:	781b      	ldrb	r3, [r3, #0]
 988:	2109      	movs	r1, #9
 98a:	0018      	movs	r0, r3
 98c:	f7ff fc5c 	bl	248 <rijndael_mul>
 990:	0003      	movs	r3, r0
 992:	001c      	movs	r4, r3
 994:	197b      	adds	r3, r7, r5
 996:	785b      	ldrb	r3, [r3, #1]
 998:	210e      	movs	r1, #14
 99a:	0018      	movs	r0, r3
 99c:	f7ff fc54 	bl	248 <rijndael_mul>
 9a0:	0003      	movs	r3, r0
 9a2:	4063      	eors	r3, r4
 9a4:	b2dc      	uxtb	r4, r3
 9a6:	197b      	adds	r3, r7, r5
 9a8:	789b      	ldrb	r3, [r3, #2]
 9aa:	210b      	movs	r1, #11
 9ac:	0018      	movs	r0, r3
 9ae:	f7ff fc4b 	bl	248 <rijndael_mul>
 9b2:	0003      	movs	r3, r0
 9b4:	4063      	eors	r3, r4
 9b6:	b2dc      	uxtb	r4, r3
 9b8:	197b      	adds	r3, r7, r5
 9ba:	78db      	ldrb	r3, [r3, #3]
 9bc:	210d      	movs	r1, #13
 9be:	0018      	movs	r0, r3
 9c0:	f7ff fc42 	bl	248 <rijndael_mul>
 9c4:	0003      	movs	r3, r0
 9c6:	0019      	movs	r1, r3
 9c8:	19bb      	adds	r3, r7, r6
 9ca:	781b      	ldrb	r3, [r3, #0]
 9cc:	3304      	adds	r3, #4
 9ce:	687a      	ldr	r2, [r7, #4]
 9d0:	18d3      	adds	r3, r2, r3
 9d2:	0022      	movs	r2, r4
 9d4:	404a      	eors	r2, r1
 9d6:	b2d2      	uxtb	r2, r2
 9d8:	701a      	strb	r2, [r3, #0]
    state[i + 8] = rijndael_mul(a[0], 0xd) ^ rijndael_mul(a[1], 0x9) ^ rijndael_mul(a[2], 0xe) ^ rijndael_mul(a[3], 0xb);
 9da:	197b      	adds	r3, r7, r5
 9dc:	781b      	ldrb	r3, [r3, #0]
 9de:	210d      	movs	r1, #13
 9e0:	0018      	movs	r0, r3
 9e2:	f7ff fc31 	bl	248 <rijndael_mul>
 9e6:	0003      	movs	r3, r0
 9e8:	001c      	movs	r4, r3
 9ea:	197b      	adds	r3, r7, r5
 9ec:	785b      	ldrb	r3, [r3, #1]
 9ee:	2109      	movs	r1, #9
 9f0:	0018      	movs	r0, r3
 9f2:	f7ff fc29 	bl	248 <rijndael_mul>
 9f6:	0003      	movs	r3, r0
 9f8:	4063      	eors	r3, r4
 9fa:	b2dc      	uxtb	r4, r3
 9fc:	197b      	adds	r3, r7, r5
 9fe:	789b      	ldrb	r3, [r3, #2]
 a00:	210e      	movs	r1, #14
 a02:	0018      	movs	r0, r3
 a04:	f7ff fc20 	bl	248 <rijndael_mul>
 a08:	0003      	movs	r3, r0
 a0a:	4063      	eors	r3, r4
 a0c:	b2dc      	uxtb	r4, r3
 a0e:	197b      	adds	r3, r7, r5
 a10:	78db      	ldrb	r3, [r3, #3]
 a12:	210b      	movs	r1, #11
 a14:	0018      	movs	r0, r3
 a16:	f7ff fc17 	bl	248 <rijndael_mul>
 a1a:	0003      	movs	r3, r0
 a1c:	0019      	movs	r1, r3
 a1e:	19bb      	adds	r3, r7, r6
 a20:	781b      	ldrb	r3, [r3, #0]
 a22:	3308      	adds	r3, #8
 a24:	687a      	ldr	r2, [r7, #4]
 a26:	18d3      	adds	r3, r2, r3
 a28:	0022      	movs	r2, r4
 a2a:	404a      	eors	r2, r1
 a2c:	b2d2      	uxtb	r2, r2
 a2e:	701a      	strb	r2, [r3, #0]
    state[i + 12] = rijndael_mul(a[0], 0xb) ^ rijndael_mul(a[1], 0xd) ^ rijndael_mul(a[2], 0x9) ^ rijndael_mul(a[3], 0xe);
 a30:	197b      	adds	r3, r7, r5
 a32:	781b      	ldrb	r3, [r3, #0]
 a34:	210b      	movs	r1, #11
 a36:	0018      	movs	r0, r3
 a38:	f7ff fc06 	bl	248 <rijndael_mul>
 a3c:	0003      	movs	r3, r0
 a3e:	001c      	movs	r4, r3
 a40:	197b      	adds	r3, r7, r5
 a42:	785b      	ldrb	r3, [r3, #1]
 a44:	210d      	movs	r1, #13
 a46:	0018      	movs	r0, r3
 a48:	f7ff fbfe 	bl	248 <rijndael_mul>
 a4c:	0003      	movs	r3, r0
 a4e:	4063      	eors	r3, r4
 a50:	b2dc      	uxtb	r4, r3
 a52:	197b      	adds	r3, r7, r5
 a54:	789b      	ldrb	r3, [r3, #2]
 a56:	2109      	movs	r1, #9
 a58:	0018      	movs	r0, r3
 a5a:	f7ff fbf5 	bl	248 <rijndael_mul>
 a5e:	0003      	movs	r3, r0
 a60:	4063      	eors	r3, r4
 a62:	b2dc      	uxtb	r4, r3
 a64:	197b      	adds	r3, r7, r5
 a66:	78db      	ldrb	r3, [r3, #3]
 a68:	210e      	movs	r1, #14
 a6a:	0018      	movs	r0, r3
 a6c:	f7ff fbec 	bl	248 <rijndael_mul>
 a70:	0003      	movs	r3, r0
 a72:	0019      	movs	r1, r3
 a74:	19bb      	adds	r3, r7, r6
 a76:	781b      	ldrb	r3, [r3, #0]
 a78:	330c      	adds	r3, #12
 a7a:	687a      	ldr	r2, [r7, #4]
 a7c:	18d3      	adds	r3, r2, r3
 a7e:	0022      	movs	r2, r4
 a80:	404a      	eors	r2, r1
 a82:	b2d2      	uxtb	r2, r2
 a84:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; i++) {
 a86:	19bb      	adds	r3, r7, r6
 a88:	781a      	ldrb	r2, [r3, #0]
 a8a:	19bb      	adds	r3, r7, r6
 a8c:	3201      	adds	r2, #1
 a8e:	701a      	strb	r2, [r3, #0]
 a90:	230f      	movs	r3, #15
 a92:	18fb      	adds	r3, r7, r3
 a94:	781b      	ldrb	r3, [r3, #0]
 a96:	2b03      	cmp	r3, #3
 a98:	d800      	bhi.n	a9c <rijndael_inv_mix_columns+0x1c2>
 a9a:	e727      	b.n	8ec <rijndael_inv_mix_columns+0x12>
  }
}
 a9c:	46c0      	nop			; (mov r8, r8)
 a9e:	46c0      	nop			; (mov r8, r8)
 aa0:	46bd      	mov	r13, r7
 aa2:	b005      	add	sp, #20
 aa4:	bdf0      	pop	{r4, r5, r6, r7, r15}

00000aa6 <aes_128_ecb_encrypt>:

void aes_128_ecb_encrypt(const uint8_t* key, const uint8_t* plaintext, uint8_t* ciphertext) {
 aa6:	b5b0      	push	{r4, r5, r7, r14}
 aa8:	b0b6      	sub	sp, #216	; 0xd8
 aaa:	af00      	add	r7, sp, #0
 aac:	60f8      	str	r0, [r7, #12]
 aae:	60b9      	str	r1, [r7, #8]
 ab0:	607a      	str	r2, [r7, #4]
  uint8_t w[Nb * (Nr + 1) * 4];
  uint8_t i;
  uint8_t j;
  uint8_t state[16];

  rijndael_key_schedule(key, w);
 ab2:	2324      	movs	r3, #36	; 0x24
 ab4:	18fa      	adds	r2, r7, r3
 ab6:	68fb      	ldr	r3, [r7, #12]
 ab8:	0011      	movs	r1, r2
 aba:	0018      	movs	r0, r3
 abc:	f7ff fc0e 	bl	2dc <rijndael_key_schedule>

  for (i = 0; i < 16; i += 4) {
 ac0:	23d7      	movs	r3, #215	; 0xd7
 ac2:	18fb      	adds	r3, r7, r3
 ac4:	2200      	movs	r2, #0
 ac6:	701a      	strb	r2, [r3, #0]
 ac8:	e0da      	b.n	c80 <aes_128_ecb_encrypt+0x1da>
    for (j = 0; j < 4; j++) {
 aca:	23d6      	movs	r3, #214	; 0xd6
 acc:	18fb      	adds	r3, r7, r3
 ace:	2200      	movs	r2, #0
 ad0:	701a      	strb	r2, [r3, #0]
 ad2:	e042      	b.n	b5a <aes_128_ecb_encrypt+0xb4>
      state[j * 4] = plaintext[i + j];
 ad4:	24d7      	movs	r4, #215	; 0xd7
 ad6:	193b      	adds	r3, r7, r4
 ad8:	781a      	ldrb	r2, [r3, #0]
 ada:	20d6      	movs	r0, #214	; 0xd6
 adc:	183b      	adds	r3, r7, r0
 ade:	781b      	ldrb	r3, [r3, #0]
 ae0:	18d3      	adds	r3, r2, r3
 ae2:	001a      	movs	r2, r3
 ae4:	68bb      	ldr	r3, [r7, #8]
 ae6:	189a      	adds	r2, r3, r2
 ae8:	183b      	adds	r3, r7, r0
 aea:	781b      	ldrb	r3, [r3, #0]
 aec:	009b      	lsls	r3, r3, #2
 aee:	7811      	ldrb	r1, [r2, #0]
 af0:	2514      	movs	r5, #20
 af2:	197a      	adds	r2, r7, r5
 af4:	54d1      	strb	r1, [r2, r3]
      state[j * 4 + 1] = plaintext[i + j + 4];
 af6:	193b      	adds	r3, r7, r4
 af8:	781a      	ldrb	r2, [r3, #0]
 afa:	183b      	adds	r3, r7, r0
 afc:	781b      	ldrb	r3, [r3, #0]
 afe:	18d3      	adds	r3, r2, r3
 b00:	3304      	adds	r3, #4
 b02:	68ba      	ldr	r2, [r7, #8]
 b04:	18d2      	adds	r2, r2, r3
 b06:	183b      	adds	r3, r7, r0
 b08:	781b      	ldrb	r3, [r3, #0]
 b0a:	009b      	lsls	r3, r3, #2
 b0c:	3301      	adds	r3, #1
 b0e:	7811      	ldrb	r1, [r2, #0]
 b10:	197a      	adds	r2, r7, r5
 b12:	54d1      	strb	r1, [r2, r3]
      state[j * 4 + 2] = plaintext[i + j + 8];
 b14:	193b      	adds	r3, r7, r4
 b16:	781a      	ldrb	r2, [r3, #0]
 b18:	183b      	adds	r3, r7, r0
 b1a:	781b      	ldrb	r3, [r3, #0]
 b1c:	18d3      	adds	r3, r2, r3
 b1e:	3308      	adds	r3, #8
 b20:	68ba      	ldr	r2, [r7, #8]
 b22:	18d2      	adds	r2, r2, r3
 b24:	183b      	adds	r3, r7, r0
 b26:	781b      	ldrb	r3, [r3, #0]
 b28:	009b      	lsls	r3, r3, #2
 b2a:	3302      	adds	r3, #2
 b2c:	7811      	ldrb	r1, [r2, #0]
 b2e:	197a      	adds	r2, r7, r5
 b30:	54d1      	strb	r1, [r2, r3]
      state[j * 4 + 3] = plaintext[i + j + 12];
 b32:	193b      	adds	r3, r7, r4
 b34:	781a      	ldrb	r2, [r3, #0]
 b36:	183b      	adds	r3, r7, r0
 b38:	781b      	ldrb	r3, [r3, #0]
 b3a:	18d3      	adds	r3, r2, r3
 b3c:	330c      	adds	r3, #12
 b3e:	68ba      	ldr	r2, [r7, #8]
 b40:	18d2      	adds	r2, r2, r3
 b42:	183b      	adds	r3, r7, r0
 b44:	781b      	ldrb	r3, [r3, #0]
 b46:	009b      	lsls	r3, r3, #2
 b48:	3303      	adds	r3, #3
 b4a:	7811      	ldrb	r1, [r2, #0]
 b4c:	197a      	adds	r2, r7, r5
 b4e:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; j++) {
 b50:	183b      	adds	r3, r7, r0
 b52:	781a      	ldrb	r2, [r3, #0]
 b54:	183b      	adds	r3, r7, r0
 b56:	3201      	adds	r2, #1
 b58:	701a      	strb	r2, [r3, #0]
 b5a:	24d6      	movs	r4, #214	; 0xd6
 b5c:	193b      	adds	r3, r7, r4
 b5e:	781b      	ldrb	r3, [r3, #0]
 b60:	2b03      	cmp	r3, #3
 b62:	d9b7      	bls.n	ad4 <aes_128_ecb_encrypt+0x2e>
    }

    rijndael_add_round_key(state, w, 0);
 b64:	2324      	movs	r3, #36	; 0x24
 b66:	18f9      	adds	r1, r7, r3
 b68:	2314      	movs	r3, #20
 b6a:	18fb      	adds	r3, r7, r3
 b6c:	2200      	movs	r2, #0
 b6e:	0018      	movs	r0, r3
 b70:	f7ff fcca 	bl	508 <rijndael_add_round_key>

    for (j = 1; j < Nr; j++) {
 b74:	193b      	adds	r3, r7, r4
 b76:	2201      	movs	r2, #1
 b78:	701a      	strb	r2, [r3, #0]
 b7a:	e01a      	b.n	bb2 <aes_128_ecb_encrypt+0x10c>
      rijndael_sub_bytes(state);
 b7c:	2414      	movs	r4, #20
 b7e:	193b      	adds	r3, r7, r4
 b80:	0018      	movs	r0, r3
 b82:	f7ff fcf3 	bl	56c <rijndael_sub_bytes>
      rijndael_shift_rows(state);
 b86:	193b      	adds	r3, r7, r4
 b88:	0018      	movs	r0, r3
 b8a:	f7ff fd17 	bl	5bc <rijndael_shift_rows>
      rijndael_mix_columns(state);
 b8e:	193b      	adds	r3, r7, r4
 b90:	0018      	movs	r0, r3
 b92:	f7ff fd68 	bl	666 <rijndael_mix_columns>
      rijndael_add_round_key(state, w, j);
 b96:	25d6      	movs	r5, #214	; 0xd6
 b98:	197b      	adds	r3, r7, r5
 b9a:	781a      	ldrb	r2, [r3, #0]
 b9c:	2324      	movs	r3, #36	; 0x24
 b9e:	18f9      	adds	r1, r7, r3
 ba0:	193b      	adds	r3, r7, r4
 ba2:	0018      	movs	r0, r3
 ba4:	f7ff fcb0 	bl	508 <rijndael_add_round_key>
    for (j = 1; j < Nr; j++) {
 ba8:	197b      	adds	r3, r7, r5
 baa:	781a      	ldrb	r2, [r3, #0]
 bac:	197b      	adds	r3, r7, r5
 bae:	3201      	adds	r2, #1
 bb0:	701a      	strb	r2, [r3, #0]
 bb2:	25d6      	movs	r5, #214	; 0xd6
 bb4:	197b      	adds	r3, r7, r5
 bb6:	781b      	ldrb	r3, [r3, #0]
 bb8:	2b09      	cmp	r3, #9
 bba:	d9df      	bls.n	b7c <aes_128_ecb_encrypt+0xd6>
    }

    rijndael_sub_bytes(state);
 bbc:	2414      	movs	r4, #20
 bbe:	193b      	adds	r3, r7, r4
 bc0:	0018      	movs	r0, r3
 bc2:	f7ff fcd3 	bl	56c <rijndael_sub_bytes>
    rijndael_shift_rows(state);
 bc6:	193b      	adds	r3, r7, r4
 bc8:	0018      	movs	r0, r3
 bca:	f7ff fcf7 	bl	5bc <rijndael_shift_rows>
    rijndael_add_round_key(state, w, Nr);
 bce:	2324      	movs	r3, #36	; 0x24
 bd0:	18f9      	adds	r1, r7, r3
 bd2:	193b      	adds	r3, r7, r4
 bd4:	220a      	movs	r2, #10
 bd6:	0018      	movs	r0, r3
 bd8:	f7ff fc96 	bl	508 <rijndael_add_round_key>

    for (j = 0; j < 4; j++) {
 bdc:	197b      	adds	r3, r7, r5
 bde:	2200      	movs	r2, #0
 be0:	701a      	strb	r2, [r3, #0]
 be2:	e042      	b.n	c6a <aes_128_ecb_encrypt+0x1c4>
      ciphertext[i + j] = state[j * 4];
 be4:	20d6      	movs	r0, #214	; 0xd6
 be6:	183b      	adds	r3, r7, r0
 be8:	781b      	ldrb	r3, [r3, #0]
 bea:	009a      	lsls	r2, r3, #2
 bec:	24d7      	movs	r4, #215	; 0xd7
 bee:	193b      	adds	r3, r7, r4
 bf0:	7819      	ldrb	r1, [r3, #0]
 bf2:	183b      	adds	r3, r7, r0
 bf4:	781b      	ldrb	r3, [r3, #0]
 bf6:	18cb      	adds	r3, r1, r3
 bf8:	0019      	movs	r1, r3
 bfa:	687b      	ldr	r3, [r7, #4]
 bfc:	185b      	adds	r3, r3, r1
 bfe:	2514      	movs	r5, #20
 c00:	1979      	adds	r1, r7, r5
 c02:	5c8a      	ldrb	r2, [r1, r2]
 c04:	701a      	strb	r2, [r3, #0]
      ciphertext[i + j + 4] = state[j * 4 + 1];
 c06:	183b      	adds	r3, r7, r0
 c08:	781b      	ldrb	r3, [r3, #0]
 c0a:	009b      	lsls	r3, r3, #2
 c0c:	1c5a      	adds	r2, r3, #1
 c0e:	193b      	adds	r3, r7, r4
 c10:	7819      	ldrb	r1, [r3, #0]
 c12:	183b      	adds	r3, r7, r0
 c14:	781b      	ldrb	r3, [r3, #0]
 c16:	18cb      	adds	r3, r1, r3
 c18:	3304      	adds	r3, #4
 c1a:	6879      	ldr	r1, [r7, #4]
 c1c:	18cb      	adds	r3, r1, r3
 c1e:	1979      	adds	r1, r7, r5
 c20:	5c8a      	ldrb	r2, [r1, r2]
 c22:	701a      	strb	r2, [r3, #0]
      ciphertext[i + j + 8] = state[j * 4 + 2];
 c24:	183b      	adds	r3, r7, r0
 c26:	781b      	ldrb	r3, [r3, #0]
 c28:	009b      	lsls	r3, r3, #2
 c2a:	1c9a      	adds	r2, r3, #2
 c2c:	193b      	adds	r3, r7, r4
 c2e:	7819      	ldrb	r1, [r3, #0]
 c30:	183b      	adds	r3, r7, r0
 c32:	781b      	ldrb	r3, [r3, #0]
 c34:	18cb      	adds	r3, r1, r3
 c36:	3308      	adds	r3, #8
 c38:	6879      	ldr	r1, [r7, #4]
 c3a:	18cb      	adds	r3, r1, r3
 c3c:	1979      	adds	r1, r7, r5
 c3e:	5c8a      	ldrb	r2, [r1, r2]
 c40:	701a      	strb	r2, [r3, #0]
      ciphertext[i + j + 12] = state[j * 4 + 3];
 c42:	183b      	adds	r3, r7, r0
 c44:	781b      	ldrb	r3, [r3, #0]
 c46:	009b      	lsls	r3, r3, #2
 c48:	1cda      	adds	r2, r3, #3
 c4a:	193b      	adds	r3, r7, r4
 c4c:	7819      	ldrb	r1, [r3, #0]
 c4e:	183b      	adds	r3, r7, r0
 c50:	781b      	ldrb	r3, [r3, #0]
 c52:	18cb      	adds	r3, r1, r3
 c54:	330c      	adds	r3, #12
 c56:	6879      	ldr	r1, [r7, #4]
 c58:	18cb      	adds	r3, r1, r3
 c5a:	1979      	adds	r1, r7, r5
 c5c:	5c8a      	ldrb	r2, [r1, r2]
 c5e:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; j++) {
 c60:	183b      	adds	r3, r7, r0
 c62:	781a      	ldrb	r2, [r3, #0]
 c64:	183b      	adds	r3, r7, r0
 c66:	3201      	adds	r2, #1
 c68:	701a      	strb	r2, [r3, #0]
 c6a:	23d6      	movs	r3, #214	; 0xd6
 c6c:	18fb      	adds	r3, r7, r3
 c6e:	781b      	ldrb	r3, [r3, #0]
 c70:	2b03      	cmp	r3, #3
 c72:	d9b7      	bls.n	be4 <aes_128_ecb_encrypt+0x13e>
  for (i = 0; i < 16; i += 4) {
 c74:	22d7      	movs	r2, #215	; 0xd7
 c76:	18bb      	adds	r3, r7, r2
 c78:	18ba      	adds	r2, r7, r2
 c7a:	7812      	ldrb	r2, [r2, #0]
 c7c:	3204      	adds	r2, #4
 c7e:	701a      	strb	r2, [r3, #0]
 c80:	23d7      	movs	r3, #215	; 0xd7
 c82:	18fb      	adds	r3, r7, r3
 c84:	781b      	ldrb	r3, [r3, #0]
 c86:	2b0f      	cmp	r3, #15
 c88:	d800      	bhi.n	c8c <aes_128_ecb_encrypt+0x1e6>
 c8a:	e71e      	b.n	aca <aes_128_ecb_encrypt+0x24>
    }
  }
}
 c8c:	46c0      	nop			; (mov r8, r8)
 c8e:	46c0      	nop			; (mov r8, r8)
 c90:	46bd      	mov	r13, r7
 c92:	b036      	add	sp, #216	; 0xd8
 c94:	bdb0      	pop	{r4, r5, r7, r15}

00000c96 <aes_128_ecb_decrypt>:

void aes_128_ecb_decrypt(const uint8_t* key, const uint8_t* ciphertext, uint8_t* plaintext) {
 c96:	b5b0      	push	{r4, r5, r7, r14}
 c98:	b0b6      	sub	sp, #216	; 0xd8
 c9a:	af00      	add	r7, sp, #0
 c9c:	60f8      	str	r0, [r7, #12]
 c9e:	60b9      	str	r1, [r7, #8]
 ca0:	607a      	str	r2, [r7, #4]
  uint8_t w[Nb * (Nr + 1) * 4];
  uint8_t i;
  uint8_t j;
  uint8_t state[16];

  rijndael_key_schedule(key, w);
 ca2:	2324      	movs	r3, #36	; 0x24
 ca4:	18fa      	adds	r2, r7, r3
 ca6:	68fb      	ldr	r3, [r7, #12]
 ca8:	0011      	movs	r1, r2
 caa:	0018      	movs	r0, r3
 cac:	f7ff fb16 	bl	2dc <rijndael_key_schedule>

  for (i = 0; i < 16; i += 4) {
 cb0:	23d7      	movs	r3, #215	; 0xd7
 cb2:	18fb      	adds	r3, r7, r3
 cb4:	2200      	movs	r2, #0
 cb6:	701a      	strb	r2, [r3, #0]
 cb8:	e0da      	b.n	e70 <aes_128_ecb_decrypt+0x1da>
    for (j = 0; j < 4; j++) {
 cba:	23d6      	movs	r3, #214	; 0xd6
 cbc:	18fb      	adds	r3, r7, r3
 cbe:	2200      	movs	r2, #0
 cc0:	701a      	strb	r2, [r3, #0]
 cc2:	e042      	b.n	d4a <aes_128_ecb_decrypt+0xb4>
      state[j * 4] = ciphertext[i + j];
 cc4:	24d7      	movs	r4, #215	; 0xd7
 cc6:	193b      	adds	r3, r7, r4
 cc8:	781a      	ldrb	r2, [r3, #0]
 cca:	20d6      	movs	r0, #214	; 0xd6
 ccc:	183b      	adds	r3, r7, r0
 cce:	781b      	ldrb	r3, [r3, #0]
 cd0:	18d3      	adds	r3, r2, r3
 cd2:	001a      	movs	r2, r3
 cd4:	68bb      	ldr	r3, [r7, #8]
 cd6:	189a      	adds	r2, r3, r2
 cd8:	183b      	adds	r3, r7, r0
 cda:	781b      	ldrb	r3, [r3, #0]
 cdc:	009b      	lsls	r3, r3, #2
 cde:	7811      	ldrb	r1, [r2, #0]
 ce0:	2514      	movs	r5, #20
 ce2:	197a      	adds	r2, r7, r5
 ce4:	54d1      	strb	r1, [r2, r3]
      state[j * 4 + 1] = ciphertext[i + j + 4];
 ce6:	193b      	adds	r3, r7, r4
 ce8:	781a      	ldrb	r2, [r3, #0]
 cea:	183b      	adds	r3, r7, r0
 cec:	781b      	ldrb	r3, [r3, #0]
 cee:	18d3      	adds	r3, r2, r3
 cf0:	3304      	adds	r3, #4
 cf2:	68ba      	ldr	r2, [r7, #8]
 cf4:	18d2      	adds	r2, r2, r3
 cf6:	183b      	adds	r3, r7, r0
 cf8:	781b      	ldrb	r3, [r3, #0]
 cfa:	009b      	lsls	r3, r3, #2
 cfc:	3301      	adds	r3, #1
 cfe:	7811      	ldrb	r1, [r2, #0]
 d00:	197a      	adds	r2, r7, r5
 d02:	54d1      	strb	r1, [r2, r3]
      state[j * 4 + 2] = ciphertext[i + j + 8];
 d04:	193b      	adds	r3, r7, r4
 d06:	781a      	ldrb	r2, [r3, #0]
 d08:	183b      	adds	r3, r7, r0
 d0a:	781b      	ldrb	r3, [r3, #0]
 d0c:	18d3      	adds	r3, r2, r3
 d0e:	3308      	adds	r3, #8
 d10:	68ba      	ldr	r2, [r7, #8]
 d12:	18d2      	adds	r2, r2, r3
 d14:	183b      	adds	r3, r7, r0
 d16:	781b      	ldrb	r3, [r3, #0]
 d18:	009b      	lsls	r3, r3, #2
 d1a:	3302      	adds	r3, #2
 d1c:	7811      	ldrb	r1, [r2, #0]
 d1e:	197a      	adds	r2, r7, r5
 d20:	54d1      	strb	r1, [r2, r3]
      state[j * 4 + 3] = ciphertext[i + j + 12];
 d22:	193b      	adds	r3, r7, r4
 d24:	781a      	ldrb	r2, [r3, #0]
 d26:	183b      	adds	r3, r7, r0
 d28:	781b      	ldrb	r3, [r3, #0]
 d2a:	18d3      	adds	r3, r2, r3
 d2c:	330c      	adds	r3, #12
 d2e:	68ba      	ldr	r2, [r7, #8]
 d30:	18d2      	adds	r2, r2, r3
 d32:	183b      	adds	r3, r7, r0
 d34:	781b      	ldrb	r3, [r3, #0]
 d36:	009b      	lsls	r3, r3, #2
 d38:	3303      	adds	r3, #3
 d3a:	7811      	ldrb	r1, [r2, #0]
 d3c:	197a      	adds	r2, r7, r5
 d3e:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; j++) {
 d40:	183b      	adds	r3, r7, r0
 d42:	781a      	ldrb	r2, [r3, #0]
 d44:	183b      	adds	r3, r7, r0
 d46:	3201      	adds	r2, #1
 d48:	701a      	strb	r2, [r3, #0]
 d4a:	24d6      	movs	r4, #214	; 0xd6
 d4c:	193b      	adds	r3, r7, r4
 d4e:	781b      	ldrb	r3, [r3, #0]
 d50:	2b03      	cmp	r3, #3
 d52:	d9b7      	bls.n	cc4 <aes_128_ecb_decrypt+0x2e>
    }

    rijndael_add_round_key(state, w, Nr);
 d54:	2324      	movs	r3, #36	; 0x24
 d56:	18f9      	adds	r1, r7, r3
 d58:	2314      	movs	r3, #20
 d5a:	18fb      	adds	r3, r7, r3
 d5c:	220a      	movs	r2, #10
 d5e:	0018      	movs	r0, r3
 d60:	f7ff fbd2 	bl	508 <rijndael_add_round_key>

    for (j = Nr - 1; j > 0; j--) {
 d64:	193b      	adds	r3, r7, r4
 d66:	2209      	movs	r2, #9
 d68:	701a      	strb	r2, [r3, #0]
 d6a:	e01a      	b.n	da2 <aes_128_ecb_decrypt+0x10c>
      rijndael_inv_shift_rows(state);
 d6c:	2414      	movs	r4, #20
 d6e:	193b      	adds	r3, r7, r4
 d70:	0018      	movs	r0, r3
 d72:	f7ff fd5d 	bl	830 <rijndael_inv_shift_rows>
      rijndael_inv_sub_bytes(state);
 d76:	193b      	adds	r3, r7, r4
 d78:	0018      	movs	r0, r3
 d7a:	f7ff fd31 	bl	7e0 <rijndael_inv_sub_bytes>
      rijndael_add_round_key(state, w, j);
 d7e:	25d6      	movs	r5, #214	; 0xd6
 d80:	197b      	adds	r3, r7, r5
 d82:	781a      	ldrb	r2, [r3, #0]
 d84:	2324      	movs	r3, #36	; 0x24
 d86:	18f9      	adds	r1, r7, r3
 d88:	193b      	adds	r3, r7, r4
 d8a:	0018      	movs	r0, r3
 d8c:	f7ff fbbc 	bl	508 <rijndael_add_round_key>
      rijndael_inv_mix_columns(state);
 d90:	193b      	adds	r3, r7, r4
 d92:	0018      	movs	r0, r3
 d94:	f7ff fda1 	bl	8da <rijndael_inv_mix_columns>
    for (j = Nr - 1; j > 0; j--) {
 d98:	197b      	adds	r3, r7, r5
 d9a:	781a      	ldrb	r2, [r3, #0]
 d9c:	197b      	adds	r3, r7, r5
 d9e:	3a01      	subs	r2, #1
 da0:	701a      	strb	r2, [r3, #0]
 da2:	25d6      	movs	r5, #214	; 0xd6
 da4:	197b      	adds	r3, r7, r5
 da6:	781b      	ldrb	r3, [r3, #0]
 da8:	2b00      	cmp	r3, #0
 daa:	d1df      	bne.n	d6c <aes_128_ecb_decrypt+0xd6>
    }

    rijndael_inv_shift_rows(state);
 dac:	2414      	movs	r4, #20
 dae:	193b      	adds	r3, r7, r4
 db0:	0018      	movs	r0, r3
 db2:	f7ff fd3d 	bl	830 <rijndael_inv_shift_rows>
    rijndael_inv_sub_bytes(state);
 db6:	193b      	adds	r3, r7, r4
 db8:	0018      	movs	r0, r3
 dba:	f7ff fd11 	bl	7e0 <rijndael_inv_sub_bytes>
    rijndael_add_round_key(state, w, 0);
 dbe:	2324      	movs	r3, #36	; 0x24
 dc0:	18f9      	adds	r1, r7, r3
 dc2:	193b      	adds	r3, r7, r4
 dc4:	2200      	movs	r2, #0
 dc6:	0018      	movs	r0, r3
 dc8:	f7ff fb9e 	bl	508 <rijndael_add_round_key>

    for (j = 0; j < 4; j++) {
 dcc:	197b      	adds	r3, r7, r5
 dce:	2200      	movs	r2, #0
 dd0:	701a      	strb	r2, [r3, #0]
 dd2:	e042      	b.n	e5a <aes_128_ecb_decrypt+0x1c4>
      plaintext[i + j] = state[j * 4];
 dd4:	20d6      	movs	r0, #214	; 0xd6
 dd6:	183b      	adds	r3, r7, r0
 dd8:	781b      	ldrb	r3, [r3, #0]
 dda:	009a      	lsls	r2, r3, #2
 ddc:	24d7      	movs	r4, #215	; 0xd7
 dde:	193b      	adds	r3, r7, r4
 de0:	7819      	ldrb	r1, [r3, #0]
 de2:	183b      	adds	r3, r7, r0
 de4:	781b      	ldrb	r3, [r3, #0]
 de6:	18cb      	adds	r3, r1, r3
 de8:	0019      	movs	r1, r3
 dea:	687b      	ldr	r3, [r7, #4]
 dec:	185b      	adds	r3, r3, r1
 dee:	2514      	movs	r5, #20
 df0:	1979      	adds	r1, r7, r5
 df2:	5c8a      	ldrb	r2, [r1, r2]
 df4:	701a      	strb	r2, [r3, #0]
      plaintext[i + j + 4] = state[j * 4 + 1];
 df6:	183b      	adds	r3, r7, r0
 df8:	781b      	ldrb	r3, [r3, #0]
 dfa:	009b      	lsls	r3, r3, #2
 dfc:	1c5a      	adds	r2, r3, #1
 dfe:	193b      	adds	r3, r7, r4
 e00:	7819      	ldrb	r1, [r3, #0]
 e02:	183b      	adds	r3, r7, r0
 e04:	781b      	ldrb	r3, [r3, #0]
 e06:	18cb      	adds	r3, r1, r3
 e08:	3304      	adds	r3, #4
 e0a:	6879      	ldr	r1, [r7, #4]
 e0c:	18cb      	adds	r3, r1, r3
 e0e:	1979      	adds	r1, r7, r5
 e10:	5c8a      	ldrb	r2, [r1, r2]
 e12:	701a      	strb	r2, [r3, #0]
      plaintext[i + j + 8] = state[j * 4 + 2];
 e14:	183b      	adds	r3, r7, r0
 e16:	781b      	ldrb	r3, [r3, #0]
 e18:	009b      	lsls	r3, r3, #2
 e1a:	1c9a      	adds	r2, r3, #2
 e1c:	193b      	adds	r3, r7, r4
 e1e:	7819      	ldrb	r1, [r3, #0]
 e20:	183b      	adds	r3, r7, r0
 e22:	781b      	ldrb	r3, [r3, #0]
 e24:	18cb      	adds	r3, r1, r3
 e26:	3308      	adds	r3, #8
 e28:	6879      	ldr	r1, [r7, #4]
 e2a:	18cb      	adds	r3, r1, r3
 e2c:	1979      	adds	r1, r7, r5
 e2e:	5c8a      	ldrb	r2, [r1, r2]
 e30:	701a      	strb	r2, [r3, #0]
      plaintext[i + j + 12] = state[j * 4 + 3];
 e32:	183b      	adds	r3, r7, r0
 e34:	781b      	ldrb	r3, [r3, #0]
 e36:	009b      	lsls	r3, r3, #2
 e38:	1cda      	adds	r2, r3, #3
 e3a:	193b      	adds	r3, r7, r4
 e3c:	7819      	ldrb	r1, [r3, #0]
 e3e:	183b      	adds	r3, r7, r0
 e40:	781b      	ldrb	r3, [r3, #0]
 e42:	18cb      	adds	r3, r1, r3
 e44:	330c      	adds	r3, #12
 e46:	6879      	ldr	r1, [r7, #4]
 e48:	18cb      	adds	r3, r1, r3
 e4a:	1979      	adds	r1, r7, r5
 e4c:	5c8a      	ldrb	r2, [r1, r2]
 e4e:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; j++) {
 e50:	183b      	adds	r3, r7, r0
 e52:	781a      	ldrb	r2, [r3, #0]
 e54:	183b      	adds	r3, r7, r0
 e56:	3201      	adds	r2, #1
 e58:	701a      	strb	r2, [r3, #0]
 e5a:	23d6      	movs	r3, #214	; 0xd6
 e5c:	18fb      	adds	r3, r7, r3
 e5e:	781b      	ldrb	r3, [r3, #0]
 e60:	2b03      	cmp	r3, #3
 e62:	d9b7      	bls.n	dd4 <aes_128_ecb_decrypt+0x13e>
  for (i = 0; i < 16; i += 4) {
 e64:	22d7      	movs	r2, #215	; 0xd7
 e66:	18bb      	adds	r3, r7, r2
 e68:	18ba      	adds	r2, r7, r2
 e6a:	7812      	ldrb	r2, [r2, #0]
 e6c:	3204      	adds	r2, #4
 e6e:	701a      	strb	r2, [r3, #0]
 e70:	23d7      	movs	r3, #215	; 0xd7
 e72:	18fb      	adds	r3, r7, r3
 e74:	781b      	ldrb	r3, [r3, #0]
 e76:	2b0f      	cmp	r3, #15
 e78:	d800      	bhi.n	e7c <aes_128_ecb_decrypt+0x1e6>
 e7a:	e71e      	b.n	cba <aes_128_ecb_decrypt+0x24>
    }
  }
}
 e7c:	46c0      	nop			; (mov r8, r8)
 e7e:	46c0      	nop			; (mov r8, r8)
 e80:	46bd      	mov	r13, r7
 e82:	b036      	add	sp, #216	; 0xd8
 e84:	bdb0      	pop	{r4, r5, r7, r15}
	...

00000e88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 e88:	480d      	ldr	r0, [pc, #52]	; (ec0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 e8a:	4685      	mov	r13, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 e8c:	f000 f825 	bl	eda <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 e90:	480c      	ldr	r0, [pc, #48]	; (ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 e92:	490d      	ldr	r1, [pc, #52]	; (ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 e94:	4a0d      	ldr	r2, [pc, #52]	; (ecc <LoopForever+0xe>)
  movs r3, #0
 e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 e98:	e002      	b.n	ea0 <LoopCopyDataInit>

00000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 e9e:	3304      	adds	r3, #4

00000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 ea4:	d3f9      	bcc.n	e9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 ea6:	4a0a      	ldr	r2, [pc, #40]	; (ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 ea8:	4c0a      	ldr	r4, [pc, #40]	; (ed4 <LoopForever+0x16>)
  movs r3, #0
 eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 eac:	e001      	b.n	eb2 <LoopFillZerobss>

00000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 eb0:	3204      	adds	r2, #4

00000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 eb4:	d3fb      	bcc.n	eae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 eb6:	f7ff f94f 	bl	158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 eba:	f7ff f993 	bl	1e4 <main>

00000ebe <LoopForever>:

LoopForever:
    b LoopForever
 ebe:	e7fe      	b.n	ebe <LoopForever>
  ldr   r0, =_estack
 ec0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 ec8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 ecc:	00001140 	.word	0x00001140
  ldr r2, =_sbss
 ed0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 ed4:	2000001c 	.word	0x2000001c

00000ed8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 ed8:	e7fe      	b.n	ed8 <ADC_IRQHandler>

00000eda <SystemInit>:
#include "system.h"
#include "stdio.h"

void SystemInit(void)
{
 eda:	b580      	push	{r7, r14}
 edc:	af00      	add	r7, sp, #0
  /* NOTE :SystemInit(): 
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
 //  setvbuf(stdout, NULL, _IONBF, 0); // disable buffering stdout, needed so that enters to _write
}
 ede:	46c0      	nop			; (mov r8, r8)
 ee0:	46bd      	mov	r13, r7
 ee2:	bd80      	pop	{r7, r15}

00000ee4 <_init>:
 ee4:	b5f8      	push	{r3, r4, r5, r6, r7, r14}
 ee6:	46c0      	nop			; (mov r8, r8)
 ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 eea:	bc08      	pop	{r3}
 eec:	469e      	mov	r14, r3
 eee:	4770      	bx	r14

00000ef0 <_fini>:
 ef0:	b5f8      	push	{r3, r4, r5, r6, r7, r14}
 ef2:	46c0      	nop			; (mov r8, r8)
 ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 ef6:	bc08      	pop	{r3}
 ef8:	469e      	mov	r14, r3
 efa:	4770      	bx	r14
